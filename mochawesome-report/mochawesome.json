{
  "stats": {
    "suites": 25,
    "tests": 95,
    "passes": 95,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-14T11:43:39.896Z",
    "end": "2020-01-14T11:43:40.028Z",
    "duration": 132,
    "testsRegistered": 95,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "28767541-49e4-4038-b713-d73a34479082",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "39b8419c-d460-41dd-a717-c2989fbe01af",
          "title": "GRID.TOO_MUCH_MARKETING_BLOCKS",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
          "file": "\\test\\test-grid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "556bd478-06b9-42ee-b313-c07d188f1820",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 2 and Offer 8",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID Payment 2 and Offer 8",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 32 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "609c2ca9-eb2b-4d20-b7d9-358fe140fb5c",
                  "parentUUID": "556bd478-06b9-42ee-b313-c07d188f1820",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 warning and 3 marketings",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID 3 warning and 3 marketings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"6\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"3\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 56 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e1286d40-319b-495d-b4c0-a842b6352e0e",
                  "parentUUID": "556bd478-06b9-42ee-b313-c07d188f1820",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "609c2ca9-eb2b-4d20-b7d9-358fe140fb5c",
                "e1286d40-319b-495d-b4c0-a842b6352e0e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3c86a280-6040-4a66-b870-4ee972127c8e",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 8 and Offer 2",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID Payment 8 and Offer 2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "54683e07-4e2b-4423-bcee-3f3361b9b6b7",
                  "parentUUID": "3c86a280-6040-4a66-b870-4ee972127c8e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8 different and 2 commercial",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID 8 different and 2 commercial",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"product\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"history\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"cover\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"collect\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"articles\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"subscribtion\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"event\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "38d8afe0-735e-443f-b525-e853f670f5d6",
                  "parentUUID": "3c86a280-6040-4a66-b870-4ee972127c8e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "54683e07-4e2b-4423-bcee-3f3361b9b6b7",
                "38d8afe0-735e-443f-b525-e853f670f5d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "70d1a693-9459-4f8e-a9b7-272ad8647223",
          "title": "TEXT.INVALID_H2_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
          "file": "\\test\\test-text-position-h2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "745443a9-52f5-415b-8011-ccbe36bcfce7",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3d29c97a-3572-4a9f-bfac-e7cb3d794176",
                  "parentUUID": "745443a9-52f5-415b-8011-ccbe36bcfce7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "54e189cd-b0db-4731-9a77-2e68ce419d12",
                  "parentUUID": "745443a9-52f5-415b-8011-ccbe36bcfce7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before internal nested h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before internal nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n            ]\n        }            \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 22, \"line\": 10 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "affb3130-cca1-4aa7-8f48-6e3ca2b1deae",
                  "parentUUID": "745443a9-52f5-415b-8011-ccbe36bcfce7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3d29c97a-3572-4a9f-bfac-e7cb3d794176",
                "54e189cd-b0db-4731-9a77-2e68ce419d12",
                "affb3130-cca1-4aa7-8f48-6e3ca2b1deae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5f1cf7e4-78fb-4a6f-89b8-7793738f0e21",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "801fb104-1413-4595-afbe-2156fa3e5184",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f9e2549d-fe3d-430c-b273-bf8f83d10a6e",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" }\n        },\n        { \n            \"block\": \"card\", \n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c0a6055a-7d12-4000-b8b0-a3acc013f4f4",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before nested internal h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "3280885c-b7bc-4f8b-b5a6-fa895db47f62",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1 but in other node",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before h1 but in other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": {\n                \"block\": \"form\",\n                \"content\": \n                    { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            }\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "00b8c195-0bec-4801-9b40-c798367bf811",
                  "parentUUID": "311210ac-b634-4ab3-b2ba-77bd64c58ee6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f1cf7e4-78fb-4a6f-89b8-7793738f0e21",
                "801fb104-1413-4595-afbe-2156fa3e5184",
                "f9e2549d-fe3d-430c-b273-bf8f83d10a6e",
                "c0a6055a-7d12-4000-b8b0-a3acc013f4f4",
                "3280885c-b7bc-4f8b-b5a6-fa895db47f62",
                "00b8c195-0bec-4801-9b40-c798367bf811"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "494721b8-95c4-4bfe-bac2-ba5f4d36fc3a",
          "title": "TEXT.INVALID_H3_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
          "file": "\\test\\test-text-position-h3.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "37207d68-2a27-4ed3-8884-18592f926715",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "cf030331-b787-44f0-9246-df1a29f43446",
                  "parentUUID": "37207d68-2a27-4ed3-8884-18592f926715",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID h3 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "cce89a81-7005-412c-a72e-30d06259dbf2",
                  "parentUUID": "37207d68-2a27-4ed3-8884-18592f926715",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf030331-b787-44f0-9246-df1a29f43446",
                "cce89a81-7005-412c-a72e-30d06259dbf2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "853c8841-066d-4c25-9660-da835fec0ae2",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before h3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "4952d22a-873c-40cd-8182-a186ff8c9bb2",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }        \n            ]\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6177dca6-faed-4411-adcb-f59de3cbd0e3",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested internal h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "428db25d-5745-453e-a9d1-75a18f5ed923",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2 but on other node",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h3 before h2 but on other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"card\",\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ] \n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "40694963-9bdf-4cf9-9a5f-aab7d1a3644d",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test nested h3 before h2 but in deeper level",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Test nested h3 before h2 but in deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h3\" }\n            }\n        ]\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            }\n        ]\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "22af7e14-d44b-4a68-a5ae-2a0ffaed2067",
                  "parentUUID": "8f227ed6-6dce-4179-b8e1-83c48e4ac9d8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "853c8841-066d-4c25-9660-da835fec0ae2",
                "4952d22a-873c-40cd-8182-a186ff8c9bb2",
                "6177dca6-faed-4411-adcb-f59de3cbd0e3",
                "428db25d-5745-453e-a9d1-75a18f5ed923",
                "40694963-9bdf-4cf9-9a5f-aab7d1a3644d",
                "22af7e14-d44b-4a68-a5ae-2a0ffaed2067"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2fcd3cf4-46a4-4159-b831-6f2b3532b568",
          "title": "TEXT.SEVERAL_H1",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
          "file": "\\test\\test-text-several-h1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 6 },\n            \"end\": { \"column\": 18, \"line\": 9 }\n        }\n    },\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 10 },\n            \"end\": { \"column\": 18, \"line\": 13 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e0c27597-829f-4de4-9ec6-6c25410c48ce",
                  "parentUUID": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 sequential h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 5 },\n            \"end\": { \"column\": 66, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "b7d8807d-0cbe-4728-bd63-ec6d5ecd60f3",
                  "parentUUID": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 on different levels",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID h1 on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 37, \"line\": 11 },\n            \"end\": { \"column\": 82, \"line\": 11 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "039b993e-45d5-4b05-a758-774b5209d293",
                  "parentUUID": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        },\n        {\n            \"block\": \"card\",\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 18 },\n            \"end\": { \"column\": 74, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3cc578ea-fd35-4ff4-a716-fd946c1b357f",
                  "parentUUID": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Internal nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"text\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h1\" },\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 8 },\n            \"end\": { \"column\": 74, \"line\": 8 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "739d0a17-6fd0-4f23-83aa-48647a70e620",
                  "parentUUID": "d480e26e-0f99-44ee-b5d0-c3e897d86f75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e0c27597-829f-4de4-9ec6-6c25410c48ce",
                "b7d8807d-0cbe-4728-bd63-ec6d5ecd60f3",
                "039b993e-45d5-4b05-a758-774b5209d293",
                "3cc578ea-fd35-4ff4-a716-fd946c1b357f",
                "739d0a17-6fd0-4f23-83aa-48647a70e620"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6e43a086-c102-4e24-9b15-1cb61479a609",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5f39ff13-50d9-416d-93bd-249f3e5867ac",
                  "parentUUID": "6e43a086-c102-4e24-9b15-1cb61479a609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID no sequential h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\" },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "91faac75-f276-440a-adb3-c90f48da2e4a",
                  "parentUUID": "6e43a086-c102-4e24-9b15-1cb61479a609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h1 and nested h4",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h1 and nested h4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d77c3a66-19e5-4efc-914f-226e41e27095",
                  "parentUUID": "6e43a086-c102-4e24-9b15-1cb61479a609",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h4 and nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h4 and nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "57691bd0-f045-4e4f-9801-1a48c2ef736d",
                  "parentUUID": "6e43a086-c102-4e24-9b15-1cb61479a609",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f39ff13-50d9-416d-93bd-249f3e5867ac",
                "91faac75-f276-440a-adb3-c90f48da2e4a",
                "d77c3a66-19e5-4efc-914f-226e41e27095",
                "57691bd0-f045-4e4f-9801-1a48c2ef736d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "274b5903-4000-4b63-9832-82611671a737",
          "title": "WARNING.INVALID_BUTTON_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
          "file": "\\test\\test-warning-button-position.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e504de01-09b4-4c4c-97ee-6985941c84fa",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Button before placeholder on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 67, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ba0e4f84-4338-44e0-a6c8-69e268d9bbe1",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder on deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"placeholder\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 36, \"line\": 7 },\n                      \"end\": { \"column\": 26, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ad240631-82d9-4c93-a5e1-41dd77a8fedd",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before placeholder, both on deeper levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before placeholder, both on deeper levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 75, \"line\": 9 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8f2ec201-dcb1-482a-b4c9-562a60b770a9",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before 2 placeholders",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before 2 placeholders",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 18 },\n                      \"end\": { \"column\": 67, \"line\": 18 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "e762f72b-8c05-412a-9b8b-1aee7f453f5a",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in one nested block",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in one nested block",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"button\",\n                      \"mods\": { \"size\": \"m\" },\n                      \"content\": [\n                          { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2aaf4e29-b39f-47cd-8593-25ab1a1a460e",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in block__elem items",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in block__elem items",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\",\n                      \"elem\": \"button-wrapper\",\n                      \"content\": [\n                          {\n                              \"block\": \"button\", \n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"warning\",\n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }         \n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 30, \"line\": 12 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "c8897e4b-619a-4c27-8db9-63852dd53efb",
                  "parentUUID": "e504de01-09b4-4c4c-97ee-6985941c84fa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba0e4f84-4338-44e0-a6c8-69e268d9bbe1",
                "ad240631-82d9-4c93-a5e1-41dd77a8fedd",
                "8f2ec201-dcb1-482a-b4c9-562a60b770a9",
                "e762f72b-8c05-412a-9b8b-1aee7f453f5a",
                "2aaf4e29-b39f-47cd-8593-25ab1a1a460e",
                "c8897e4b-619a-4c27-8db9-63852dd53efb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a4db5d24-dbc4-46b7-8c9c-aa89b7e71bc1",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Placeholder and button on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder and button on the same level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d84406fd-805d-4a9e-8cee-53c77b18ae21",
                  "parentUUID": "a4db5d24-dbc4-46b7-8c9c-aa89b7e71bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Button is on the deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e826414c-f103-4f00-a26a-d97cf8eebf21",
                  "parentUUID": "a4db5d24-dbc4-46b7-8c9c-aa89b7e71bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Placeholder is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d85f552f-4d92-4940-9d43-553fae0c6175",
                  "parentUUID": "a4db5d24-dbc4-46b7-8c9c-aa89b7e71bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block and placeholder under button",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Not warning block and placeholder under button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0410dff4-34c5-4793-a4cc-6b0ad2882a46",
                  "parentUUID": "a4db5d24-dbc4-46b7-8c9c-aa89b7e71bc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d84406fd-805d-4a9e-8cee-53c77b18ae21",
                "e826414c-f103-4f00-a26a-d97cf8eebf21",
                "d85f552f-4d92-4940-9d43-553fae0c6175",
                "0410dff4-34c5-4793-a4cc-6b0ad2882a46"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2c40939c-4ce3-4831-954f-5694b55eb989",
          "title": "WARNING.INVALID_BUTTON_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
          "file": "\\test\\test-warning-button-sizes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "002bade8-3ee5-4803-9ac2-17181df652d5",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid button sizes, equal or bigger than s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or bigger than s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 68, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8514041e-7e17-48d3-bfe4-0a186f820902",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, equal or smaller than xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or smaller than xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 67, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "6761b34c-e627-4bae-8607-ec4a1e964a1b",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button size xxxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button size xxxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 78, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "96b2c4e7-344f-4157-818b-389fe631227b",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, text and non-text blocks in array",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, text and non-text blocks in array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"not-a-text-block\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 68, \"line\": 7 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "0b305084-30b5-429c-ac4c-87fda4d6dacd",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Buttons are on deeper levels than etalon text",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Buttons are on deeper levels than etalon text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 11 },\n                      \"end\": { \"column\": 83, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "24790f16-3cef-44ca-bb17-0188abe1fa57",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is on deeper level than buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is on deeper level than buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 16 },\n                      \"end\": { \"column\": 83, \"line\": 16 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "bdfacc1c-93ab-45f8-8ba5-fefdde521e09",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty button size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid empty button size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "00949abb-c650-4a7b-8293-7f1e8cd8e4d1",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size in button mods",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No size in button mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"prop\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b6de1360-88f7-4ecd-b8d3-f5b58b60cda3",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No mods in button",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\" }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 42, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "c089ad55-bfa7-4082-bcb0-f3d47885e044",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is under buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is under buttons",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 10 },\n                      \"end\": { \"column\": 83, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "caad0a8d-a90a-4339-b8da-b4a6b2da357e",
                  "parentUUID": "002bade8-3ee5-4803-9ac2-17181df652d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8514041e-7e17-48d3-bfe4-0a186f820902",
                "6761b34c-e627-4bae-8607-ec4a1e964a1b",
                "96b2c4e7-344f-4157-818b-389fe631227b",
                "0b305084-30b5-429c-ac4c-87fda4d6dacd",
                "24790f16-3cef-44ca-bb17-0188abe1fa57",
                "bdfacc1c-93ab-45f8-8ba5-fefdde521e09",
                "00949abb-c650-4a7b-8293-7f1e8cd8e4d1",
                "b6de1360-88f7-4ecd-b8d3-f5b58b60cda3",
                "c089ad55-bfa7-4082-bcb0-f3d47885e044",
                "caad0a8d-a90a-4339-b8da-b4a6b2da357e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid xl-button size after l-size text block ",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid xl-button size after l-size text block ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a151cb3a-091b-4354-a4eb-249828db45c8",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e7e04a2f-6b95-4b95-ab57-2c9601f226b8",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size m",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size m",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "81d02343-b733-443f-9ec5-2a07db643741",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size l",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c898702a-4847-4a2b-811f-bd471e16e1fa",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e43fb28a-0550-422c-bbb6-98793ec2427b",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f1c62a07-e914-4cfa-a40d-2aa060664d9f",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text and button on the different levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Text and button on the different levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"l\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b057bc8d-ec94-4a71-8fa0-96f67839d3af",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "fffebdca-250a-47ef-b3b3-23906f06b278",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text on deeper level after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text on deeper level after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "fbcad17f-7726-40d2-9f37-c1a84764a215",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button m-size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button m-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"m\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ba3e2879-c07d-4ec5-935e-08bb7d8651c8",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button empty size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button empty size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c2eacbc4-6fdc-4488-a042-913a5c878fbb",
                  "parentUUID": "78c7115c-d7c0-4eb9-a652-a62e4d02d601",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a151cb3a-091b-4354-a4eb-249828db45c8",
                "e7e04a2f-6b95-4b95-ab57-2c9601f226b8",
                "81d02343-b733-443f-9ec5-2a07db643741",
                "c898702a-4847-4a2b-811f-bd471e16e1fa",
                "e43fb28a-0550-422c-bbb6-98793ec2427b",
                "f1c62a07-e914-4cfa-a40d-2aa060664d9f",
                "b057bc8d-ec94-4a71-8fa0-96f67839d3af",
                "fffebdca-250a-47ef-b3b3-23906f06b278",
                "fbcad17f-7726-40d2-9f37-c1a84764a215",
                "ba3e2879-c07d-4ec5-935e-08bb7d8651c8",
                "c2eacbc4-6fdc-4488-a042-913a5c878fbb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa3482ee-e104-4596-8610-968bb7f5fea3",
          "title": "WARNING.INVALID_PLACEHOLDER_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
          "file": "\\test\\test-warning-placeholder-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "340eeaf5-e800-4787-b21b-612a515c4020",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in 2 sequential placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in 2 sequential placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xl\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xxl\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 4 },\n                      \"end\": { \"column\": 22, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "07003a3a-4e30-4936-93b5-ba2cb4e53d74",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxl\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxxl\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"xxxxl\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 7 },\n                      \"end\": { \"column\": 30, \"line\": 10 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 11 },\n                      \"end\": { \"column\": 30, \"line\": 18 }\n                  }\n              }\n              ,\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 45, \"line\": 14 },\n                      \"end\": { \"column\": 34, \"line\": 17 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8a7ce6da-8341-4c82-8f34-57d288cbedd8",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid empty size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b0ef8b47-b1a2-46f5-b1ec-36793ee46243",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No mods in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8ed0a879-8273-4e7f-9161-031fedf14d5a",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size property in placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No size property in placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"prop\": \"m\", \"prop2\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "26bf5c53-dd60-4763-850e-1630c9ae4941",
                  "parentUUID": "cbf93ac4-ccc6-4419-beed-cf6848aead17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "340eeaf5-e800-4787-b21b-612a515c4020",
                "07003a3a-4e30-4936-93b5-ba2cb4e53d74",
                "8a7ce6da-8341-4c82-8f34-57d288cbedd8",
                "b0ef8b47-b1a2-46f5-b1ec-36793ee46243",
                "8ed0a879-8273-4e7f-9161-031fedf14d5a",
                "26bf5c53-dd60-4763-850e-1630c9ae4941"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid l-size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "85fc4ad7-e752-4f6d-b8d9-7c9fe5712719",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid l-size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9383a063-127e-4f22-b8fa-71d6a5611333",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"s\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"m\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"l\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7d330259-48b0-4b2c-a824-875be470d0e9",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with non-valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with non-valid placeholder size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "55d026dd-74cc-4746-8d34-88b79a9c6be7",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with empty placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with empty placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "acff9110-759a-44a5-bd16-d33ec54dff6e",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with no placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with no placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "be75b2ca-c8d0-4d97-b441-73ad82e2028f",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID no warning block with valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "95c915c9-2fc5-4b6c-812e-60ef805e0937",
                  "parentUUID": "8535a007-2c44-47f2-bdbb-16e05ddf9c03",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85fc4ad7-e752-4f6d-b8d9-7c9fe5712719",
                "9383a063-127e-4f22-b8fa-71d6a5611333",
                "7d330259-48b0-4b2c-a824-875be470d0e9",
                "55d026dd-74cc-4746-8d34-88b79a9c6be7",
                "acff9110-759a-44a5-bd16-d33ec54dff6e",
                "be75b2ca-c8d0-4d97-b441-73ad82e2028f",
                "95c915c9-2fc5-4b6c-812e-60ef805e0937"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3ef6c08c-1b2b-40e3-b30f-0c5e8342a5bd",
          "title": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
          "file": "\\test\\test-warning-text-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 2 blocks of different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n\"block\": \"warning\",\n\"content\": [\n    {\n        \"block\": \"placeholder\",\n        \"mods\": { \"size\": \"m\" }\n    },\n    {\n        \"elem\": \"content\",\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"m\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"l\" }\n            }\n        ]\n    }\n]\n            }`;\n            const result = lint(inputJson);\n            expect(result).to.be.an('array').that.is.deep.equal([\n{\n    \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n    \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n    \"location\": {\n        \"start\": { \"column\": 1, \"line\": 1 },\n        \"end\": { \"column\": 14, \"line\": 22 }\n    }\n}\n            ]);",
                  "err": {},
                  "uuid": "11cca699-674e-4110-8829-dcd81d32a90d",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 3 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"placeholder\",\n            \"mods\": { \"size\": \"m\" }\n        },\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 26 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "8e9956f6-254d-41c1-bae2-67c3da57a3a2",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning blocks, empty lines",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID nested warning blocks, empty lines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n{\n    \"block\": \"warning\",\n    \"content\": {\n        \"block\": \"warning\",\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 28, \"line\": 4 },\n            \"end\": { \"column\": 18, \"line\": 22 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3ee6f968-bf4d-49e8-8123-32421217cc45",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested text blocks with different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested text blocks with different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": \n    {\n        \"block\": \"text\",\n        \"mods\": { \"size\": \"s\" },\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 23 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "dfe8be2f-c705-4400-86ce-2c2d1472bff7",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text blocks with different sizes on different levels",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text blocks with different sizes on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"s\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "f24d37fe-9b9f-4abb-bb82-8943aea29fd5",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\"                        \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "5593725f-8080-4b2a-bf54-3f87a8fe9a51",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\"\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e89360c0-2aec-4c4e-8bbd-7ef36051fed8",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without size in mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"prop\": \"m\" }    \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "7ab08a18-3222-4bfe-a573-97883cca7d5c",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without size in mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"prop\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "2d7393c1-74d4-4380-99eb-ab7202757932",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "31240ee7-417f-4b19-be20-e38c716873a6",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon size is not set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"xl\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "67ea6c65-ea03-45db-8290-6b2c4dd0679b",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested warning elements of different text sizes inside one warning block",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested warning elements of different text sizes inside one warning block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n                  \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n                  \"location\": {\n                      \"start\": { \"column\": 1, \"line\": 1 },\n                      \"end\": { \"column\": 14, \"line\": 21 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "06e7a69a-75a0-41d2-9f79-ab093e98e517",
                  "parentUUID": "49c4bf19-bc80-490a-a0f1-7eb6ef083c13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "11cca699-674e-4110-8829-dcd81d32a90d",
                "8e9956f6-254d-41c1-bae2-67c3da57a3a2",
                "3ee6f968-bf4d-49e8-8123-32421217cc45",
                "dfe8be2f-c705-4400-86ce-2c2d1472bff7",
                "f24d37fe-9b9f-4abb-bb82-8943aea29fd5",
                "5593725f-8080-4b2a-bf54-3f87a8fe9a51",
                "e89360c0-2aec-4c4e-8bbd-7ef36051fed8",
                "7ab08a18-3222-4bfe-a573-97883cca7d5c",
                "2d7393c1-74d4-4380-99eb-ab7202757932",
                "31240ee7-417f-4b19-be20-e38c716873a6",
                "67ea6c65-ea03-45db-8290-6b2c4dd0679b",
                "06e7a69a-75a0-41d2-9f79-ab093e98e517"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 text blocks of size-l",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 2 text blocks of size-l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  [\n                      { \n                          \"block\": \"placeholder\",\n                          \"mods\": { \"size\": \"m\" }\n                      },\n                      {  \n                          \"elem\": \"content\",\n                          \"content\": \n                              [\n                                  { \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  },\n                                  {  \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  }\n                              ]\n                      }\n                  ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1b21de92-cd94-4494-8589-28c34e3faa24",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 text blocks of size-m, 3rd level children,content is object",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 text blocks of size-m, 3rd level children,content is object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": \n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      }\n                                  ]\n                          }\n                  }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6a9bd583-20c5-4c33-9019-0c8fa24fb31e",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 nested warning blocks of different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 nested warning blocks of different text sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {\n                              \"block\": \"warning\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      }\n                                  ]\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "bfe4ddb8-597e-41d7-813b-359177619afa",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with non-equal text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with non-equal text sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"l\" }\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f23412fe-adbd-446c-88bd-a0e64d7e7196",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with not set text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with not set text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"prop\": \"l\" }\n                          },\n                          {  \n                              \"block\": \"text\"\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ee5b8bc7-85af-423e-93df-43bd52d5f049",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Separate nested warning blocks with different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID Separate nested warning blocks with different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  {\"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          {\n                              \"block\": \"warning\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "84f65bb4-e706-4bed-bcc0-8509a257469a",
                  "parentUUID": "52a7efe6-9ed6-4939-a3fb-650ce0d3337b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1b21de92-cd94-4494-8589-28c34e3faa24",
                "6a9bd583-20c5-4c33-9019-0c8fa24fb31e",
                "bfe4ddb8-597e-41d7-813b-359177619afa",
                "f23412fe-adbd-446c-88bd-a0e64d7e7196",
                "ee5b8bc7-85af-423e-93df-43bd52d5f049",
                "84f65bb4-e706-4bed-bcc0-8509a257469a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8d4d1880-aef4-4eaa-8416-a04389e79377",
          "title": "Simple input",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty input",
              "fullTitle": "Simple input empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "1688ea09-8b33-4d0d-9225-b5eadc7e339a",
              "parentUUID": "8d4d1880-aef4-4eaa-8416-a04389e79377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty object",
              "fullTitle": "Simple input empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "03e64e9f-932c-4b24-9fba-3b609ff8e405",
              "parentUUID": "8d4d1880-aef4-4eaa-8416-a04389e79377",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty warning",
              "fullTitle": "Simple input empty warning",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{ \"block\": \"warning\"}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "d5e0b9e8-f89f-42fb-b77e-b27c92ad79c8",
              "parentUUID": "8d4d1880-aef4-4eaa-8416-a04389e79377",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1688ea09-8b33-4d0d-9225-b5eadc7e339a",
            "03e64e9f-932c-4b24-9fba-3b609ff8e405",
            "d5e0b9e8-f89f-42fb-b77e-b27c92ad79c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}