{
  "stats": {
    "suites": 25,
    "tests": 95,
    "passes": 95,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-17T15:27:10.199Z",
    "end": "2020-01-17T15:27:10.321Z",
    "duration": 122,
    "testsRegistered": 95,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "62b87bc6-23ed-401e-8b28-5a8070b9be8f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "02cc51ce-e188-4cb8-989b-198638d22277",
          "title": "GRID.TOO_MUCH_MARKETING_BLOCKS",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
          "file": "\\test\\test-grid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6db445b3-a4a0-4028-b4d7-7eed78f01239",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 2 and Offer 8",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID Payment 2 and Offer 8",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 32 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "a440ff68-55d3-4c04-81f4-d17b10dbaa40",
                  "parentUUID": "6db445b3-a4a0-4028-b4d7-7eed78f01239",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 warning and 3 marketings",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID 3 warning and 3 marketings",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"6\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"3\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 56 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "8aee8014-72a8-4918-b9af-9a566f421f34",
                  "parentUUID": "6db445b3-a4a0-4028-b4d7-7eed78f01239",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a440ff68-55d3-4c04-81f4-d17b10dbaa40",
                "8aee8014-72a8-4918-b9af-9a566f421f34"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2557f291-cc28-49fd-a64e-9e733457928e",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 8 and Offer 2",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID Payment 8 and Offer 2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6e2f968c-21b0-4ea2-8890-fa806f53e384",
                  "parentUUID": "2557f291-cc28-49fd-a64e-9e733457928e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8 different and 2 commercial",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID 8 different and 2 commercial",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"product\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"history\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"cover\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"collect\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"articles\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"subscribtion\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"event\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "cb1f572b-83bb-4d75-a20f-2803b6674623",
                  "parentUUID": "2557f291-cc28-49fd-a64e-9e733457928e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6e2f968c-21b0-4ea2-8890-fa806f53e384",
                "cb1f572b-83bb-4d75-a20f-2803b6674623"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a45c3c12-d9df-4ad7-a0a1-045327e878d0",
          "title": "TEXT.INVALID_H2_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
          "file": "\\test\\test-text-position-h2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "99fcd2a7-6ff4-4748-9386-96bea6855ba3",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "b921f9a7-2bd6-44b3-9ede-6abe7ad481fd",
                  "parentUUID": "99fcd2a7-6ff4-4748-9386-96bea6855ba3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "752adffa-e3f8-401c-aad0-f7479941d3b8",
                  "parentUUID": "99fcd2a7-6ff4-4748-9386-96bea6855ba3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before internal nested h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n            ]\n        }            \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 22, \"line\": 10 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "a89ef08f-af2c-4482-9b8b-ac5f13abe578",
                  "parentUUID": "99fcd2a7-6ff4-4748-9386-96bea6855ba3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b921f9a7-2bd6-44b3-9ede-6abe7ad481fd",
                "752adffa-e3f8-401c-aad0-f7479941d3b8",
                "a89ef08f-af2c-4482-9b8b-ac5f13abe578"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "888106a2-d509-4bf7-b171-d3be3df92ab0",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ff839ce1-354d-4318-a119-ebe1e8cc2357",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b459ba4f-c52b-468d-9269-6637808f6277",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested internal h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "baeda170-a259-4caf-bb0b-e7b948df0391",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" }\n        },\n        { \n            \"block\": \"card\", \n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ebafb059-6dc4-4922-ad2b-a22720d245e0",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1d584024-8c4c-41bd-8b33-0676e0604100",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1 but in other node",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before h1 but in other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": {\n                \"block\": \"form\",\n                \"content\": \n                    { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            }\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "430dbeca-7a0f-4b66-82fd-3999adfa79a3",
                  "parentUUID": "888106a2-d509-4bf7-b171-d3be3df92ab0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff839ce1-354d-4318-a119-ebe1e8cc2357",
                "b459ba4f-c52b-468d-9269-6637808f6277",
                "baeda170-a259-4caf-bb0b-e7b948df0391",
                "ebafb059-6dc4-4922-ad2b-a22720d245e0",
                "1d584024-8c4c-41bd-8b33-0676e0604100",
                "430dbeca-7a0f-4b66-82fd-3999adfa79a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "80b38515-9636-4be1-850c-c2847e312f99",
          "title": "TEXT.INVALID_H3_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
          "file": "\\test\\test-text-position-h3.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d91c6e23-ddd6-4281-9a6c-434e6d16f6a1",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "d81fc86d-1f3a-4cd3-8740-e9e535cadbcf",
                  "parentUUID": "d91c6e23-ddd6-4281-9a6c-434e6d16f6a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID h3 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "bd33f165-f7f5-4cae-9592-de80e0c728d2",
                  "parentUUID": "d91c6e23-ddd6-4281-9a6c-434e6d16f6a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d81fc86d-1f3a-4cd3-8740-e9e535cadbcf",
                "bd33f165-f7f5-4cae-9592-de80e0c728d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "308e8240-308e-4490-b691-b283f1c0e4e0",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "68595064-d8ac-472d-bf5a-0004fdf88716",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }        \n            ]\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b85af2a9-05cf-4cd3-b5b0-2542b8e7fc27",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested internal h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9f4dee05-6d8f-45c0-a929-893d5ecab171",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2 but on other node",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h3 before h2 but on other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"card\",\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ] \n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "097d769e-dbee-4e37-871b-a87d8fb9ee93",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test nested h3 before h2 but in deeper level",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Test nested h3 before h2 but in deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h3\" }\n            }\n        ]\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            }\n        ]\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5847e794-e503-4f9f-b7c3-3c3766c16a48",
                  "parentUUID": "e5c15e4f-7c20-4273-9003-239fc9e1ecb5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "308e8240-308e-4490-b691-b283f1c0e4e0",
                "68595064-d8ac-472d-bf5a-0004fdf88716",
                "b85af2a9-05cf-4cd3-b5b0-2542b8e7fc27",
                "9f4dee05-6d8f-45c0-a929-893d5ecab171",
                "097d769e-dbee-4e37-871b-a87d8fb9ee93",
                "5847e794-e503-4f9f-b7c3-3c3766c16a48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "459b36de-e212-40dd-a1a2-325e28ebb1dc",
          "title": "TEXT.SEVERAL_H1",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
          "file": "\\test\\test-text-several-h1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 6 },\n            \"end\": { \"column\": 18, \"line\": 9 }\n        }\n    },\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 10 },\n            \"end\": { \"column\": 18, \"line\": 13 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "cf4ffe07-2939-4116-9cbd-8a0ac3446e06",
                  "parentUUID": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 5 },\n            \"end\": { \"column\": 66, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "7f77149d-1ab7-455b-8b97-98f82a389aaa",
                  "parentUUID": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 on different levels",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID h1 on different levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 37, \"line\": 11 },\n            \"end\": { \"column\": 82, \"line\": 11 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "ede5d5f6-0465-4d1b-a4d4-3c2555dd3285",
                  "parentUUID": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        },\n        {\n            \"block\": \"card\",\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 18 },\n            \"end\": { \"column\": 74, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "00a129b5-0d9a-42a1-abd0-404b1777acb7",
                  "parentUUID": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Internal nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"text\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h1\" },\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 8 },\n            \"end\": { \"column\": 74, \"line\": 8 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "114bad34-546e-47bd-bb25-b9b5f092cbf9",
                  "parentUUID": "ada5665e-8f27-42b6-89b4-bd13cbaff54d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cf4ffe07-2939-4116-9cbd-8a0ac3446e06",
                "7f77149d-1ab7-455b-8b97-98f82a389aaa",
                "ede5d5f6-0465-4d1b-a4d4-3c2555dd3285",
                "00a129b5-0d9a-42a1-abd0-404b1777acb7",
                "114bad34-546e-47bd-bb25-b9b5f092cbf9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "504f876b-77c5-4a68-b78a-e45c16fabfc9",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "24c8f4a7-341c-41da-8d56-1e44d850437f",
                  "parentUUID": "504f876b-77c5-4a68-b78a-e45c16fabfc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID no sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\" },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1a140a2d-5750-43f3-a949-4190175785ee",
                  "parentUUID": "504f876b-77c5-4a68-b78a-e45c16fabfc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h1 and nested h4",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h1 and nested h4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2cb7c0bd-758f-4d5d-9780-df2cda91007f",
                  "parentUUID": "504f876b-77c5-4a68-b78a-e45c16fabfc9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h4 and nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h4 and nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a1eeca42-5a7f-4f63-ab99-2940cf341600",
                  "parentUUID": "504f876b-77c5-4a68-b78a-e45c16fabfc9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "24c8f4a7-341c-41da-8d56-1e44d850437f",
                "1a140a2d-5750-43f3-a949-4190175785ee",
                "2cb7c0bd-758f-4d5d-9780-df2cda91007f",
                "a1eeca42-5a7f-4f63-ab99-2940cf341600"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56434e23-884b-4918-8da2-47c7e2193ffd",
          "title": "WARNING.INVALID_BUTTON_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
          "file": "\\test\\test-warning-button-position.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Button before placeholder on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 67, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "3fce77fb-f0ec-4be0-9117-ef2f89c329f8",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder on deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"placeholder\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 36, \"line\": 7 },\n                      \"end\": { \"column\": 26, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2d7e4ab9-a45b-4810-93db-bd93dc05ec04",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before placeholder, both on deeper levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before placeholder, both on deeper levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 75, \"line\": 9 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "48670b7a-162b-4f6d-8d9e-d8575284a277",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before 2 placeholders",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before 2 placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 18 },\n                      \"end\": { \"column\": 67, \"line\": 18 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b864a274-631e-43dd-a998-aa6a2c74517e",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in one nested block",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in one nested block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"button\",\n                      \"mods\": { \"size\": \"m\" },\n                      \"content\": [\n                          { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2ab409ff-69e7-4448-a9e5-32f26c2fb74a",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in block__elem items",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in block__elem items",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\",\n                      \"elem\": \"button-wrapper\",\n                      \"content\": [\n                          {\n                              \"block\": \"button\", \n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"warning\",\n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }         \n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 30, \"line\": 12 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "cfef2326-e701-49fe-9d37-f8655e78dd84",
                  "parentUUID": "91233e2a-3428-4b36-aaa1-7baffdfe9bdc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3fce77fb-f0ec-4be0-9117-ef2f89c329f8",
                "2d7e4ab9-a45b-4810-93db-bd93dc05ec04",
                "48670b7a-162b-4f6d-8d9e-d8575284a277",
                "b864a274-631e-43dd-a998-aa6a2c74517e",
                "2ab409ff-69e7-4448-a9e5-32f26c2fb74a",
                "cfef2326-e701-49fe-9d37-f8655e78dd84"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8f8ae513-97c8-4374-b484-92b60fe47e44",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Placeholder and button on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder and button on the same level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "cec74404-bdbf-424f-94a3-20de418f4edc",
                  "parentUUID": "8f8ae513-97c8-4374-b484-92b60fe47e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Button is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "79e1cdb7-340a-4144-a412-c3ec2e1c22b5",
                  "parentUUID": "8f8ae513-97c8-4374-b484-92b60fe47e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Placeholder is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder is on the deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5704f39b-5413-4874-a164-6c7eaf2c749d",
                  "parentUUID": "8f8ae513-97c8-4374-b484-92b60fe47e44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block and placeholder under button",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Not warning block and placeholder under button",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c18f5d4b-b204-4853-971a-d9e350144617",
                  "parentUUID": "8f8ae513-97c8-4374-b484-92b60fe47e44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cec74404-bdbf-424f-94a3-20de418f4edc",
                "79e1cdb7-340a-4144-a412-c3ec2e1c22b5",
                "5704f39b-5413-4874-a164-6c7eaf2c749d",
                "c18f5d4b-b204-4853-971a-d9e350144617"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f98cb1cc-0a0d-4695-8ec1-f27376b90ab9",
          "title": "WARNING.INVALID_BUTTON_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
          "file": "\\test\\test-warning-button-sizes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid button sizes, equal or bigger than s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or bigger than s",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 68, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "100d4d28-1cff-4e2b-a1ec-46bc55269a82",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, equal or smaller than xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or smaller than xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 67, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "9e1b114b-6d8a-4ecd-8bc0-7e2789999c42",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button size xxxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button size xxxl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 78, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "780038bb-b2aa-4dce-982b-ce189a820052",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, text and non-text blocks in array",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, text and non-text blocks in array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"not-a-text-block\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 68, \"line\": 7 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "867cb70b-53d3-4d99-a1d1-2f519a382283",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Buttons are on deeper levels than etalon text",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Buttons are on deeper levels than etalon text",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 11 },\n                      \"end\": { \"column\": 83, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8c6958ac-db9e-4b48-ab4b-64f9efa565c3",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is on deeper level than buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is on deeper level than buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 16 },\n                      \"end\": { \"column\": 83, \"line\": 16 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "9512bc68-83c5-4d75-89a9-071a7eb517e7",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty button size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid empty button size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "9c442cd1-229d-438b-98ab-1b82b2d56c4c",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size in button mods",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No size in button mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"prop\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "50ca831d-6864-41d1-bfba-db6b2f4b341d",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No mods in button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\" }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 42, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "513e7a58-a727-4199-8dfb-f86a4ef87670",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is under buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is under buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 10 },\n                      \"end\": { \"column\": 83, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2762c9c2-af83-4ddc-989d-90d073b84367",
                  "parentUUID": "149fa391-d6fb-4bc0-b1ad-8eafab1a8308",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "100d4d28-1cff-4e2b-a1ec-46bc55269a82",
                "9e1b114b-6d8a-4ecd-8bc0-7e2789999c42",
                "780038bb-b2aa-4dce-982b-ce189a820052",
                "867cb70b-53d3-4d99-a1d1-2f519a382283",
                "8c6958ac-db9e-4b48-ab4b-64f9efa565c3",
                "9512bc68-83c5-4d75-89a9-071a7eb517e7",
                "9c442cd1-229d-438b-98ab-1b82b2d56c4c",
                "50ca831d-6864-41d1-bfba-db6b2f4b341d",
                "513e7a58-a727-4199-8dfb-f86a4ef87670",
                "2762c9c2-af83-4ddc-989d-90d073b84367"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid xl-button size after l-size text block ",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid xl-button size after l-size text block ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0c79a3f8-5ffa-47f1-805e-52d88a30613b",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0eddbb33-0c04-429e-98db-aca2379f9a7f",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size m",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size m",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7bbe9c9a-c1e9-4e4b-94ec-8115d07773b4",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size l",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size l",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1f9ea70c-b8fc-4ac6-af10-23b63442af12",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d801337d-43cf-4456-bb97-3f3759c155f7",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xxl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "64b131c5-d424-49c4-bf12-2b62f4ab4ea5",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text and button on the different levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Text and button on the different levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"l\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "eb66f7bf-32aa-4dd4-b961-10efaffec58d",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0c692f42-d650-44f0-b082-420386389969",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text on deeper level after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text on deeper level after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6537570d-585e-4161-b6e7-73237b9d4889",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button m-size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button m-size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"m\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6409a906-892d-439c-804e-107acce08ce6",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button empty size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button empty size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "45388447-d3fa-4b7f-bef4-538176dc602c",
                  "parentUUID": "a406ed37-7d9d-4c34-acb9-230b2bebec2e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c79a3f8-5ffa-47f1-805e-52d88a30613b",
                "0eddbb33-0c04-429e-98db-aca2379f9a7f",
                "7bbe9c9a-c1e9-4e4b-94ec-8115d07773b4",
                "1f9ea70c-b8fc-4ac6-af10-23b63442af12",
                "d801337d-43cf-4456-bb97-3f3759c155f7",
                "64b131c5-d424-49c4-bf12-2b62f4ab4ea5",
                "eb66f7bf-32aa-4dd4-b961-10efaffec58d",
                "0c692f42-d650-44f0-b082-420386389969",
                "6537570d-585e-4161-b6e7-73237b9d4889",
                "6409a906-892d-439c-804e-107acce08ce6",
                "45388447-d3fa-4b7f-bef4-538176dc602c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2d78f77a-74bf-40a8-8567-7c300f224042",
          "title": "WARNING.INVALID_PLACEHOLDER_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
          "file": "\\test\\test-warning-placeholder-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "dcce61cc-e386-452a-a379-41671e39d492",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "e657afe0-adf7-406e-b015-917e95ec3704",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in 2 sequential placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in 2 sequential placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xl\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xxl\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 4 },\n                      \"end\": { \"column\": 22, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ad4ca3ff-cd3e-4220-8684-2b7998cb0df1",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxl\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxxl\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"xxxxl\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 7 },\n                      \"end\": { \"column\": 30, \"line\": 10 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 11 },\n                      \"end\": { \"column\": 30, \"line\": 18 }\n                  }\n              }\n              ,\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 45, \"line\": 14 },\n                      \"end\": { \"column\": 34, \"line\": 17 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "d46a48cb-6032-4534-8f16-d346b319526e",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid empty size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "d5e19f44-debb-47a5-b281-67c7f0707242",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No mods in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "69181c6e-0b61-4127-834f-405db5dae67a",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size property in placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No size property in placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"prop\": \"m\", \"prop2\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "d70302e8-f1c9-45d7-8a77-f2aa59f84308",
                  "parentUUID": "dcce61cc-e386-452a-a379-41671e39d492",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e657afe0-adf7-406e-b015-917e95ec3704",
                "ad4ca3ff-cd3e-4220-8684-2b7998cb0df1",
                "d46a48cb-6032-4534-8f16-d346b319526e",
                "d5e19f44-debb-47a5-b281-67c7f0707242",
                "69181c6e-0b61-4127-834f-405db5dae67a",
                "d70302e8-f1c9-45d7-8a77-f2aa59f84308"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid l-size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5f702b88-aa16-4ead-90a0-de0516174f25",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid l-size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d9842e28-5a95-4696-b565-a17f0ee84499",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"s\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"m\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"l\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d64d410f-de2d-4c24-b74a-b781c141966f",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with non-valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with non-valid placeholder size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f859f10c-0a88-4dee-950a-0d91d19c53d9",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with empty placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with empty placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2ad606ef-cfd2-46f1-b9eb-b260deb2ffd2",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with no placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with no placeholder mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "22ec4ec3-125e-4dc5-8f73-97ff61679c33",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID no warning block with valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e2c3f4a1-9563-4d2b-8c02-a11a582f1807",
                  "parentUUID": "84a27f02-7333-4085-adbb-7e1aab0bf47d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f702b88-aa16-4ead-90a0-de0516174f25",
                "d9842e28-5a95-4696-b565-a17f0ee84499",
                "d64d410f-de2d-4c24-b74a-b781c141966f",
                "f859f10c-0a88-4dee-950a-0d91d19c53d9",
                "2ad606ef-cfd2-46f1-b9eb-b260deb2ffd2",
                "22ec4ec3-125e-4dc5-8f73-97ff61679c33",
                "e2c3f4a1-9563-4d2b-8c02-a11a582f1807"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d5671bc7-b9b9-4b1b-a233-e7e25b577e70",
          "title": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
          "file": "\\test\\test-warning-text-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "61862a08-6dc7-4d71-a413-ed552078d45e",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 2 blocks of different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n\"block\": \"warning\",\n\"content\": [\n    {\n        \"block\": \"placeholder\",\n        \"mods\": { \"size\": \"m\" }\n    },\n    {\n        \"elem\": \"content\",\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"m\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"l\" }\n            }\n        ]\n    }\n]\n            }`;\n            const result = lint(inputJson);\n            expect(result).to.be.an('array').that.is.deep.equal([\n{\n    \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n    \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n    \"location\": {\n        \"start\": { \"column\": 1, \"line\": 1 },\n        \"end\": { \"column\": 14, \"line\": 22 }\n    }\n}\n            ]);",
                  "err": {},
                  "uuid": "bf79747f-99f1-44a7-9bf6-76acd3e39c8e",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 3 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"placeholder\",\n            \"mods\": { \"size\": \"m\" }\n        },\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 26 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e8fb74a5-963d-4d57-aa94-4c25ba83671a",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning blocks, empty lines",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID nested warning blocks, empty lines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n{\n    \"block\": \"warning\",\n    \"content\": {\n        \"block\": \"warning\",\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 28, \"line\": 4 },\n            \"end\": { \"column\": 18, \"line\": 22 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "1c524f9f-1d44-4b8e-b865-cfefb4fd1afc",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested text blocks with different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested text blocks with different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": \n    {\n        \"block\": \"text\",\n        \"mods\": { \"size\": \"s\" },\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 23 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "6b9140dc-1b02-4b19-ac5b-77a66ccecc1a",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text blocks with different sizes on different levels",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text blocks with different sizes on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"s\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e95b7e3b-4efc-4923-9d3d-1c432f8d7359",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\"                        \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "529b677f-f02b-4b74-aa1f-0f9740a1cc5d",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\"\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "749f1cc4-b34c-4205-ae3f-46932e468471",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without size in mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"prop\": \"m\" }    \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "d4b69bad-0a7f-44be-a12f-68acd200a346",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without size in mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"prop\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "733dd458-33b3-49c8-a6b6-2ab24e3f3f34",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "596eef30-08fe-4bac-92ac-75309f1ef4c2",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"xl\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "4c14ed73-8328-48a9-9191-61b4cb0ad147",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested warning elements of different text sizes inside one warning block",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested warning elements of different text sizes inside one warning block",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n                  \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n                  \"location\": {\n                      \"start\": { \"column\": 1, \"line\": 1 },\n                      \"end\": { \"column\": 14, \"line\": 21 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "3386e4ef-4ac2-4e2e-a32d-2de94e4e6253",
                  "parentUUID": "61862a08-6dc7-4d71-a413-ed552078d45e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bf79747f-99f1-44a7-9bf6-76acd3e39c8e",
                "e8fb74a5-963d-4d57-aa94-4c25ba83671a",
                "1c524f9f-1d44-4b8e-b865-cfefb4fd1afc",
                "6b9140dc-1b02-4b19-ac5b-77a66ccecc1a",
                "e95b7e3b-4efc-4923-9d3d-1c432f8d7359",
                "529b677f-f02b-4b74-aa1f-0f9740a1cc5d",
                "749f1cc4-b34c-4205-ae3f-46932e468471",
                "d4b69bad-0a7f-44be-a12f-68acd200a346",
                "733dd458-33b3-49c8-a6b6-2ab24e3f3f34",
                "596eef30-08fe-4bac-92ac-75309f1ef4c2",
                "4c14ed73-8328-48a9-9191-61b4cb0ad147",
                "3386e4ef-4ac2-4e2e-a32d-2de94e4e6253"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 8,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b14fde43-9e29-4804-ac77-a0e504070031",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 text blocks of size-l",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 2 text blocks of size-l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  [\n                      { \n                          \"block\": \"placeholder\",\n                          \"mods\": { \"size\": \"m\" }\n                      },\n                      {  \n                          \"elem\": \"content\",\n                          \"content\": \n                              [\n                                  { \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  },\n                                  {  \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  }\n                              ]\n                      }\n                  ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e633f446-7cad-4115-89a1-34d8922006d5",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 text blocks of size-m, 3rd level children,content is object",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 text blocks of size-m, 3rd level children,content is object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": \n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      }\n                                  ]\n                          }\n                  }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f4602fe8-38b9-4016-b39c-317e54672fc1",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 nested warning blocks of different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 nested warning blocks of different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {\n                              \"block\": \"warning\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      }\n                                  ]\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "36d170f8-6f25-4212-afe8-9d0ec3023b34",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with non-equal text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with non-equal text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"l\" }\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "528384ca-4757-4833-977f-215f8a0a62c1",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with not set text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with not set text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"prop\": \"l\" }\n                          },\n                          {  \n                              \"block\": \"text\"\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "03913baf-6e02-47bf-96d0-817ca3abd5b8",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Separate nested warning blocks with different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID Separate nested warning blocks with different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  {\"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          {\n                              \"block\": \"warning\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "da84d22a-2e07-45ee-814f-50f551815127",
                  "parentUUID": "b14fde43-9e29-4804-ac77-a0e504070031",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e633f446-7cad-4115-89a1-34d8922006d5",
                "f4602fe8-38b9-4016-b39c-317e54672fc1",
                "36d170f8-6f25-4212-afe8-9d0ec3023b34",
                "528384ca-4757-4833-977f-215f8a0a62c1",
                "03913baf-6e02-47bf-96d0-817ca3abd5b8",
                "da84d22a-2e07-45ee-814f-50f551815127"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "08bbed21-bea3-448a-a083-b87dc6631f0f",
          "title": "Simple input",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty input",
              "fullTitle": "Simple input empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "c68e8966-296b-494c-9dfb-1bb36b20313c",
              "parentUUID": "08bbed21-bea3-448a-a083-b87dc6631f0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty object",
              "fullTitle": "Simple input empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "fe84488f-a597-4d6f-8cfe-51809d4d005d",
              "parentUUID": "08bbed21-bea3-448a-a083-b87dc6631f0f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty warning",
              "fullTitle": "Simple input empty warning",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{ \"block\": \"warning\"}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "e396d101-2377-427f-a178-33f7297f49d3",
              "parentUUID": "08bbed21-bea3-448a-a083-b87dc6631f0f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c68e8966-296b-494c-9dfb-1bb36b20313c",
            "fe84488f-a597-4d6f-8cfe-51809d4d005d",
            "e396d101-2377-427f-a178-33f7297f49d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}