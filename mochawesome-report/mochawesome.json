{
  "stats": {
    "suites": 25,
    "tests": 95,
    "passes": 95,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-14T10:46:29.025Z",
    "end": "2020-01-14T10:46:29.190Z",
    "duration": 165,
    "testsRegistered": 95,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "338b4a04-af82-494c-b431-f1965aba7ba7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "12b49db7-4dfa-46da-b7fb-17ad92e3ae00",
          "title": "GRID.TOO_MUCH_MARKETING_BLOCKS",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
          "file": "\\test\\test-grid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8af011af-80b6-45ae-b0d7-b25b1598d99d",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 2 and Offer 8",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID Payment 2 and Offer 8",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 32 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3f143b42-67d3-46c6-ba71-a60bc6b216a2",
                  "parentUUID": "8af011af-80b6-45ae-b0d7-b25b1598d99d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 warning and 3 marketings",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID 3 warning and 3 marketings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"6\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"3\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 56 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "84be7e8c-c84a-45fa-b9d5-a9f08494d6d3",
                  "parentUUID": "8af011af-80b6-45ae-b0d7-b25b1598d99d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f143b42-67d3-46c6-ba71-a60bc6b216a2",
                "84be7e8c-c84a-45fa-b9d5-a9f08494d6d3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 9,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7bb28b25-7e3b-49d1-b6cc-79a6e478af72",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 8 and Offer 2",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID Payment 8 and Offer 2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "958614c1-1609-44d0-a9e6-521c1b062aab",
                  "parentUUID": "7bb28b25-7e3b-49d1-b6cc-79a6e478af72",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8 different and 2 commercial",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID 8 different and 2 commercial",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"product\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"history\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"cover\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"collect\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"articles\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"subscribtion\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"event\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f2b5d2e2-647a-4146-9300-805f83a813a3",
                  "parentUUID": "7bb28b25-7e3b-49d1-b6cc-79a6e478af72",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "958614c1-1609-44d0-a9e6-521c1b062aab",
                "f2b5d2e2-647a-4146-9300-805f83a813a3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f3a1f964-8a75-4e1a-b064-e142e7cf4816",
          "title": "TEXT.INVALID_H2_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
          "file": "\\test\\test-text-position-h2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "300b72cd-efb9-433d-ad4c-386cbaceecbc",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "d771d3f2-d0bc-4f69-b27c-7c742febf0b9",
                  "parentUUID": "300b72cd-efb9-433d-ad4c-386cbaceecbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0597fecb-7322-43a7-abb4-1441f6f767e3",
                  "parentUUID": "300b72cd-efb9-433d-ad4c-386cbaceecbc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before internal nested h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n            ]\n        }            \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 22, \"line\": 10 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "427d38c1-63cb-4aae-940c-0dffc37a28bf",
                  "parentUUID": "300b72cd-efb9-433d-ad4c-386cbaceecbc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d771d3f2-d0bc-4f69-b27c-7c742febf0b9",
                "0597fecb-7322-43a7-abb4-1441f6f767e3",
                "427d38c1-63cb-4aae-940c-0dffc37a28bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "606e524e-3c38-48a6-96d2-7681470697fe",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "62e06fcc-f7c5-4325-9883-7d40386ef22c",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested internal h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2d4fe60d-90df-418b-a091-5d0b1a50bf4d",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" }\n        },\n        { \n            \"block\": \"card\", \n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "39c83500-0ece-422a-8b52-0548d68c40b7",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7fa2e70d-52c7-42d6-8780-5508d2864da1",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1 but in other node",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before h1 but in other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": {\n                \"block\": \"form\",\n                \"content\": \n                    { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            }\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "155c0b58-4752-4c02-a352-84dbaa461bb0",
                  "parentUUID": "86d60b78-85e1-4c1a-a2ce-0b908ae2913f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "606e524e-3c38-48a6-96d2-7681470697fe",
                "62e06fcc-f7c5-4325-9883-7d40386ef22c",
                "2d4fe60d-90df-418b-a091-5d0b1a50bf4d",
                "39c83500-0ece-422a-8b52-0548d68c40b7",
                "7fa2e70d-52c7-42d6-8780-5508d2864da1",
                "155c0b58-4752-4c02-a352-84dbaa461bb0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a2d0de39-1bad-41ea-9045-5f43e44b03ee",
          "title": "TEXT.INVALID_H3_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
          "file": "\\test\\test-text-position-h3.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "581d6261-2b56-4741-b653-748a5cfb912f",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e917f244-93a8-4ff7-9d1a-0d6b6a185eb9",
                  "parentUUID": "581d6261-2b56-4741-b653-748a5cfb912f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID h3 before h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "c2e87059-4f0b-495b-8add-56f62e88cc29",
                  "parentUUID": "581d6261-2b56-4741-b653-748a5cfb912f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e917f244-93a8-4ff7-9d1a-0d6b6a185eb9",
                "c2e87059-4f0b-495b-8add-56f62e88cc29"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e3314860-cb0b-40c2-9462-85ff2250672b",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "53a6aae2-ee47-4c7d-8b91-78c7b53152d5",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1f34dffc-6c88-4ed4-a8e3-26d71faaf895",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested h3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }        \n            ]\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "116b55a8-5591-4e62-bdca-6f1a4eb4a534",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested internal h3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "762e76d5-1fbc-4cee-91a1-76b8d3fc3d67",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2 but on other node",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h3 before h2 but on other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"card\",\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ] \n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7a88cf73-aa07-48e7-a504-d7fccf90f687",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test nested h3 before h2 but in deeper level",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Test nested h3 before h2 but in deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h3\" }\n            }\n        ]\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            }\n        ]\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c1866cc9-aee5-43c4-a818-b26152674a3c",
                  "parentUUID": "e3314860-cb0b-40c2-9462-85ff2250672b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "53a6aae2-ee47-4c7d-8b91-78c7b53152d5",
                "1f34dffc-6c88-4ed4-a8e3-26d71faaf895",
                "116b55a8-5591-4e62-bdca-6f1a4eb4a534",
                "762e76d5-1fbc-4cee-91a1-76b8d3fc3d67",
                "7a88cf73-aa07-48e7-a504-d7fccf90f687",
                "c1866cc9-aee5-43c4-a818-b26152674a3c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e6b022a0-8f56-45a8-8d7c-a084475d8acf",
          "title": "TEXT.SEVERAL_H1",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
          "file": "\\test\\test-text-several-h1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 6 },\n            \"end\": { \"column\": 18, \"line\": 9 }\n        }\n    },\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 10 },\n            \"end\": { \"column\": 18, \"line\": 13 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "ad5ec8b7-1fc0-4911-8744-1df3c5782301",
                  "parentUUID": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 5 },\n            \"end\": { \"column\": 66, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0806d6d0-5366-44fa-9085-fdad452ca201",
                  "parentUUID": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 on different levels",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID h1 on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 37, \"line\": 11 },\n            \"end\": { \"column\": 82, \"line\": 11 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0fc53825-19a1-4c8e-8a6b-6d5bd43a6751",
                  "parentUUID": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        },\n        {\n            \"block\": \"card\",\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 18 },\n            \"end\": { \"column\": 74, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "c468333e-6ae7-4e25-9896-b4a49c4529d3",
                  "parentUUID": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Internal nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Internal nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"text\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h1\" },\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 8 },\n            \"end\": { \"column\": 74, \"line\": 8 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "30ebb313-ab6e-4f5a-91c7-02c7b617665c",
                  "parentUUID": "eddbe562-169f-41f1-abb1-c8fb4eb171f6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad5ec8b7-1fc0-4911-8744-1df3c5782301",
                "0806d6d0-5366-44fa-9085-fdad452ca201",
                "0fc53825-19a1-4c8e-8a6b-6d5bd43a6751",
                "c468333e-6ae7-4e25-9896-b4a49c4529d3",
                "30ebb313-ab6e-4f5a-91c7-02c7b617665c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bc233f52-e687-4913-8b92-6172f07f9061",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "43af8494-7830-433b-880e-e99c3f409eda",
                  "parentUUID": "bc233f52-e687-4913-8b92-6172f07f9061",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID no sequential h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\" },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d7151360-5f89-40f7-9f12-a54a6da2dee9",
                  "parentUUID": "bc233f52-e687-4913-8b92-6172f07f9061",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h1 and nested h4",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h1 and nested h4",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b1174444-7a2c-40d3-9f84-d42e05a73671",
                  "parentUUID": "bc233f52-e687-4913-8b92-6172f07f9061",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h4 and nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h4 and nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a484a175-fa4f-4bc6-b167-7260b249146d",
                  "parentUUID": "bc233f52-e687-4913-8b92-6172f07f9061",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43af8494-7830-433b-880e-e99c3f409eda",
                "d7151360-5f89-40f7-9f12-a54a6da2dee9",
                "b1174444-7a2c-40d3-9f84-d42e05a73671",
                "a484a175-fa4f-4bc6-b167-7260b249146d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "3ea9c97a-6e5a-4db4-9f14-0c94f0f9959c",
          "title": "WARNING.INVALID_BUTTON_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
          "file": "\\test\\test-warning-button-position.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Button before placeholder on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 67, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2877cda0-89d8-4172-adc5-db523e4103d7",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder on deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"placeholder\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 36, \"line\": 7 },\n                      \"end\": { \"column\": 26, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "7b5aa3df-1ca2-458c-aea7-593a6119311b",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before placeholder, both on deeper levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before placeholder, both on deeper levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 75, \"line\": 9 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "a8f49880-9b1e-40ab-8b0f-03351d3c3b98",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before 2 placeholders",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before 2 placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 18 },\n                      \"end\": { \"column\": 67, \"line\": 18 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "7d6f3308-dd9c-4377-b05f-8bdd25f5210f",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in one nested block",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in one nested block",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"button\",\n                      \"mods\": { \"size\": \"m\" },\n                      \"content\": [\n                          { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "562ae968-b628-49a7-8983-7ee71dbc28c9",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in block__elem items",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in block__elem items",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\",\n                      \"elem\": \"button-wrapper\",\n                      \"content\": [\n                          {\n                              \"block\": \"button\", \n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"warning\",\n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }         \n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 30, \"line\": 12 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "6427b6e8-f11a-41f3-8e64-67c03a39e4ae",
                  "parentUUID": "04b8a0cb-84de-41a2-80bf-58898c966dc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2877cda0-89d8-4172-adc5-db523e4103d7",
                "7b5aa3df-1ca2-458c-aea7-593a6119311b",
                "a8f49880-9b1e-40ab-8b0f-03351d3c3b98",
                "7d6f3308-dd9c-4377-b05f-8bdd25f5210f",
                "562ae968-b628-49a7-8983-7ee71dbc28c9",
                "6427b6e8-f11a-41f3-8e64-67c03a39e4ae"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a1af0db8-8e25-4b4c-9044-93241dcfb816",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Placeholder and button on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder and button on the same level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "85760761-52a8-4aea-84f8-3532d7a81989",
                  "parentUUID": "a1af0db8-8e25-4b4c-9044-93241dcfb816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Button is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "de6879a2-844b-4194-9738-9929a660ed4d",
                  "parentUUID": "a1af0db8-8e25-4b4c-9044-93241dcfb816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Placeholder is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "050a1feb-51ae-4bcf-bccf-5b0efca33628",
                  "parentUUID": "a1af0db8-8e25-4b4c-9044-93241dcfb816",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block and placeholder under button",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Not warning block and placeholder under button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5f01e70f-4b37-49c3-8e0f-fdbcbbc32c49",
                  "parentUUID": "a1af0db8-8e25-4b4c-9044-93241dcfb816",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85760761-52a8-4aea-84f8-3532d7a81989",
                "de6879a2-844b-4194-9738-9929a660ed4d",
                "050a1feb-51ae-4bcf-bccf-5b0efca33628",
                "5f01e70f-4b37-49c3-8e0f-fdbcbbc32c49"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "35b718d3-6cc0-4c11-b906-43f87e520c7d",
          "title": "WARNING.INVALID_BUTTON_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
          "file": "\\test\\test-warning-button-sizes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid button sizes, equal or bigger than s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or bigger than s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 68, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b9f03c0c-af8f-4d30-a8f8-a546d0bc886b",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, equal or smaller than xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or smaller than xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 67, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "5c9048c6-05bb-41c3-ad29-840547f1d3a2",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button size xxxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button size xxxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 78, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ec1c41d7-853a-4aa7-9da4-b03cf1a965ca",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, text and non-text blocks in array",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, text and non-text blocks in array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"not-a-text-block\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 68, \"line\": 7 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "43f68869-d6d5-4ee7-8163-760ad2285885",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Buttons are on deeper levels than etalon text",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Buttons are on deeper levels than etalon text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 11 },\n                      \"end\": { \"column\": 83, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b2b13aaf-adce-43ea-a1c9-ac1e30e1620f",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is on deeper level than buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is on deeper level than buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 16 },\n                      \"end\": { \"column\": 83, \"line\": 16 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "fc63f423-acaa-4e28-89df-312937ba779d",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty button size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid empty button size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "71cf2cc6-6af2-4117-bfad-47bdace9cc5f",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size in button mods",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No size in button mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"prop\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b121f42d-d3f6-411a-b775-19ba52f5c3dc",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No mods in button",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\" }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 42, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "50f80657-c23c-4441-88f3-c89bc78e4c6a",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is under buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is under buttons",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 10 },\n                      \"end\": { \"column\": 83, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "1bdb44c3-1754-41f6-8ecb-a7a156a1db6f",
                  "parentUUID": "35760b5c-5302-4ab5-bcad-19a2c34874b7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b9f03c0c-af8f-4d30-a8f8-a546d0bc886b",
                "5c9048c6-05bb-41c3-ad29-840547f1d3a2",
                "ec1c41d7-853a-4aa7-9da4-b03cf1a965ca",
                "43f68869-d6d5-4ee7-8163-760ad2285885",
                "b2b13aaf-adce-43ea-a1c9-ac1e30e1620f",
                "fc63f423-acaa-4e28-89df-312937ba779d",
                "71cf2cc6-6af2-4117-bfad-47bdace9cc5f",
                "b121f42d-d3f6-411a-b775-19ba52f5c3dc",
                "50f80657-c23c-4441-88f3-c89bc78e4c6a",
                "1bdb44c3-1754-41f6-8ecb-a7a156a1db6f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid xl-button size after l-size text block ",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid xl-button size after l-size text block ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7afb9647-c871-4c8b-be71-6c1427cc7610",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size s",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "effe4289-900d-414c-afa1-1765d862ca7b",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size m",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size m",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e27fac40-7e31-4993-89c9-4af0d515fba2",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size l",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "178b751f-5ebb-46d4-89c4-fa7d6af60c4a",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "334afa60-8909-4aad-b8bb-dcb59b9097fc",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xxl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1a43aab2-2f5d-4ae1-956d-90803a628d4e",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text and button on the different levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Text and button on the different levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"l\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d061d422-060f-4c87-b966-73708809da36",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0d951358-e875-4477-8a84-3141a1d583de",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text on deeper level after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text on deeper level after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a23a417d-2e98-4f97-ae52-a31f8e0cad26",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button m-size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button m-size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"m\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "30dc0b06-4349-42c4-ac9a-2af723815780",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button empty size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button empty size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5beb7bc5-ca40-4c66-b545-1f61e7f2e81f",
                  "parentUUID": "841a99ff-9a4a-42f1-8a0b-2b6554a57e69",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7afb9647-c871-4c8b-be71-6c1427cc7610",
                "effe4289-900d-414c-afa1-1765d862ca7b",
                "e27fac40-7e31-4993-89c9-4af0d515fba2",
                "178b751f-5ebb-46d4-89c4-fa7d6af60c4a",
                "334afa60-8909-4aad-b8bb-dcb59b9097fc",
                "1a43aab2-2f5d-4ae1-956d-90803a628d4e",
                "d061d422-060f-4c87-b966-73708809da36",
                "0d951358-e875-4477-8a84-3141a1d583de",
                "a23a417d-2e98-4f97-ae52-a31f8e0cad26",
                "30dc0b06-4349-42c4-ac9a-2af723815780",
                "5beb7bc5-ca40-4c66-b545-1f61e7f2e81f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b326254c-5713-4134-9f2e-41ddd03c026b",
          "title": "WARNING.INVALID_PLACEHOLDER_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
          "file": "\\test\\test-warning-placeholder-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "7a364a17-dd78-49a4-a919-63c8381a4c88",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in 2 sequential placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in 2 sequential placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xl\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xxl\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 4 },\n                      \"end\": { \"column\": 22, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "14d02869-a1a5-4c5e-ae25-7a519a5e9b3f",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxl\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxxl\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"xxxxl\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 7 },\n                      \"end\": { \"column\": 30, \"line\": 10 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 11 },\n                      \"end\": { \"column\": 30, \"line\": 18 }\n                  }\n              }\n              ,\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 45, \"line\": 14 },\n                      \"end\": { \"column\": 34, \"line\": 17 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "53a11b60-8711-4a6a-9ac8-d826cd5da6ea",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid empty size in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "1931fd45-3f42-495b-918b-72f3aee8271e",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No mods in placeholder",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "97e47af1-760a-4399-9538-676f8f9f0e9f",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size property in placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No size property in placeholder mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"prop\": \"m\", \"prop2\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ad084f56-960e-4fd6-ab35-5d92778d0b5b",
                  "parentUUID": "fe7d9b33-1e05-4ad5-85d6-60f175d7c51b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7a364a17-dd78-49a4-a919-63c8381a4c88",
                "14d02869-a1a5-4c5e-ae25-7a519a5e9b3f",
                "53a11b60-8711-4a6a-9ac8-d826cd5da6ea",
                "1931fd45-3f42-495b-918b-72f3aee8271e",
                "97e47af1-760a-4399-9538-676f8f9f0e9f",
                "ad084f56-960e-4fd6-ab35-5d92778d0b5b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c29b5291-c140-4692-9128-9afe944f31cb",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid l-size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "05361c17-fc74-406d-8805-78843330da10",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid l-size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "4e373e27-1e07-4e05-8b31-fe70f8ab5317",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"s\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"m\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"l\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0719b637-2b80-4030-9d45-db6d8a76672d",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with non-valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with non-valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d11bb4ff-4c0d-4a35-9cb5-eae6202e1047",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with empty placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with empty placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "3919efae-6e71-48a1-89d3-90692bb40671",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with no placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with no placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b7c8359a-02e6-492b-85bc-d8c5ee0a8c7f",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID no warning block with valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d1b61d95-37c1-49a9-8c34-0a8f83f6b8ab",
                  "parentUUID": "c29b5291-c140-4692-9128-9afe944f31cb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "05361c17-fc74-406d-8805-78843330da10",
                "4e373e27-1e07-4e05-8b31-fe70f8ab5317",
                "0719b637-2b80-4030-9d45-db6d8a76672d",
                "d11bb4ff-4c0d-4a35-9cb5-eae6202e1047",
                "3919efae-6e71-48a1-89d3-90692bb40671",
                "b7c8359a-02e6-492b-85bc-d8c5ee0a8c7f",
                "d1b61d95-37c1-49a9-8c34-0a8f83f6b8ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "44fc9c7e-e6aa-4aa2-9595-196150900ce6",
          "title": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
          "file": "\\test\\test-warning-text-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 2 blocks of different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n\"block\": \"warning\",\n\"content\": [\n    {\n        \"block\": \"placeholder\",\n        \"mods\": { \"size\": \"m\" }\n    },\n    {\n        \"elem\": \"content\",\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"m\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"l\" }\n            }\n        ]\n    }\n]\n            }`;\n            const result = lint(inputJson);\n            expect(result).to.be.an('array').that.is.deep.equal([\n{\n    \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n    \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n    \"location\": {\n        \"start\": { \"column\": 1, \"line\": 1 },\n        \"end\": { \"column\": 14, \"line\": 22 }\n    }\n}\n            ]);",
                  "err": {},
                  "uuid": "fa453cd0-7179-4722-b520-250771f9de4e",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 3 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"placeholder\",\n            \"mods\": { \"size\": \"m\" }\n        },\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 26 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "9884f2d3-c5ea-456f-bbd2-b4a9f8f82f1e",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning blocks, empty lines",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID nested warning blocks, empty lines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n{\n    \"block\": \"warning\",\n    \"content\": {\n        \"block\": \"warning\",\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 28, \"line\": 4 },\n            \"end\": { \"column\": 18, \"line\": 22 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "ec455ba8-0894-4863-9666-40d3c5c70e2f",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested text blocks with different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested text blocks with different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": \n    {\n        \"block\": \"text\",\n        \"mods\": { \"size\": \"s\" },\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 23 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "5daf1d6a-e46c-4661-b09f-4d7c4f7892bf",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text blocks with different sizes on different levels",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text blocks with different sizes on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"s\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "83064e06-72c2-42fc-8605-6adcde82f1a2",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\"                        \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "4c70a21c-2ae2-459c-86fd-97b9c3c34165",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\"\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "da748583-d23e-4836-a41e-911c73089e7a",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without size in mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"prop\": \"m\" }    \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "f387bc21-700b-4f48-a69d-9ba8022f0db8",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without size in mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"prop\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "22234786-6a96-46d3-918d-ad2a5856f1ae",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID size is not set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "c00b6e66-a6e4-4921-aec5-3b7453a4bf53",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon size is not set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"xl\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "994020e2-457d-4f87-acf9-7c1d59195dee",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested warning elements of different text sizes inside one warning block",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested warning elements of different text sizes inside one warning block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n                  \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n                  \"location\": {\n                      \"start\": { \"column\": 1, \"line\": 1 },\n                      \"end\": { \"column\": 14, \"line\": 21 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "cc47cde3-0350-4c9f-9323-a65025082e30",
                  "parentUUID": "e0d181e1-b9a5-4c57-a580-28f335896ef5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fa453cd0-7179-4722-b520-250771f9de4e",
                "9884f2d3-c5ea-456f-bbd2-b4a9f8f82f1e",
                "ec455ba8-0894-4863-9666-40d3c5c70e2f",
                "5daf1d6a-e46c-4661-b09f-4d7c4f7892bf",
                "83064e06-72c2-42fc-8605-6adcde82f1a2",
                "4c70a21c-2ae2-459c-86fd-97b9c3c34165",
                "da748583-d23e-4836-a41e-911c73089e7a",
                "f387bc21-700b-4f48-a69d-9ba8022f0db8",
                "22234786-6a96-46d3-918d-ad2a5856f1ae",
                "c00b6e66-a6e4-4921-aec5-3b7453a4bf53",
                "994020e2-457d-4f87-acf9-7c1d59195dee",
                "cc47cde3-0350-4c9f-9323-a65025082e30"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "759c446e-752e-4b1f-8b70-953fc64a8396",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 text blocks of size-l",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 2 text blocks of size-l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  [\n                      { \n                          \"block\": \"placeholder\",\n                          \"mods\": { \"size\": \"m\" }\n                      },\n                      {  \n                          \"elem\": \"content\",\n                          \"content\": \n                              [\n                                  { \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  },\n                                  {  \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  }\n                              ]\n                      }\n                  ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "42bb67c5-4180-4ea9-b591-ab6c422c88f8",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 text blocks of size-m, 3rd level children,content is object",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 text blocks of size-m, 3rd level children,content is object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": \n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      }\n                                  ]\n                          }\n                  }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9781dd7b-54ea-4f27-b40b-4bf8a3c4ac72",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 nested warning blocks of different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 nested warning blocks of different text sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {\n                              \"block\": \"warning\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      }\n                                  ]\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "91ed0d79-5e8f-4d19-9896-8832999cf5b2",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with non-equal text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with non-equal text sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"l\" }\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7528f872-cf34-46f7-af55-d2727e08cd5f",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with not set text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with not set text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"prop\": \"l\" }\n                          },\n                          {  \n                              \"block\": \"text\"\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "86ac44bb-abf7-44ec-a9aa-abd3c60b72fe",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Separate nested warning blocks with different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID Separate nested warning blocks with different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  {\"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          {\n                              \"block\": \"warning\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2d1043ae-8814-4383-b401-af5675c01552",
                  "parentUUID": "759c446e-752e-4b1f-8b70-953fc64a8396",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42bb67c5-4180-4ea9-b591-ab6c422c88f8",
                "9781dd7b-54ea-4f27-b40b-4bf8a3c4ac72",
                "91ed0d79-5e8f-4d19-9896-8832999cf5b2",
                "7528f872-cf34-46f7-af55-d2727e08cd5f",
                "86ac44bb-abf7-44ec-a9aa-abd3c60b72fe",
                "2d1043ae-8814-4383-b401-af5675c01552"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa144b2b-9559-40b3-902d-c4ddea2a1e46",
          "title": "Simple input",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty input",
              "fullTitle": "Simple input empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "e255d6be-3dc9-471e-a05b-772141d799d2",
              "parentUUID": "aa144b2b-9559-40b3-902d-c4ddea2a1e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty object",
              "fullTitle": "Simple input empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "3c7b2795-0e27-4961-be8c-8e83c653788c",
              "parentUUID": "aa144b2b-9559-40b3-902d-c4ddea2a1e46",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty warning",
              "fullTitle": "Simple input empty warning",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{ \"block\": \"warning\"}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "3a373635-de18-4845-b064-2dc851a180d7",
              "parentUUID": "aa144b2b-9559-40b3-902d-c4ddea2a1e46",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e255d6be-3dc9-471e-a05b-772141d799d2",
            "3c7b2795-0e27-4961-be8c-8e83c653788c",
            "3a373635-de18-4845-b064-2dc851a180d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}