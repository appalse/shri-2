{
  "stats": {
    "suites": 25,
    "tests": 95,
    "passes": 95,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-14T14:21:04.845Z",
    "end": "2020-01-14T14:21:05.039Z",
    "duration": 194,
    "testsRegistered": 95,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1000fd71-ac40-4352-bd7b-97811a5a9644",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "41932d8f-d8af-4b6a-b4f9-77463c0cffc0",
          "title": "GRID.TOO_MUCH_MARKETING_BLOCKS",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
          "file": "\\test\\test-grid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "97ef58cb-18c2-4e39-80ba-0dd84498fcfc",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 2 and Offer 8",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID Payment 2 and Offer 8",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 32 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "376da577-d222-488f-8edc-caf961caea3a",
                  "parentUUID": "97ef58cb-18c2-4e39-80ba-0dd84498fcfc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 warning and 3 marketings",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID 3 warning and 3 marketings",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"6\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"3\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 56 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "52bcfc06-f236-45b9-bc2f-ce88d374b843",
                  "parentUUID": "97ef58cb-18c2-4e39-80ba-0dd84498fcfc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "376da577-d222-488f-8edc-caf961caea3a",
                "52bcfc06-f236-45b9-bc2f-ce88d374b843"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5087eaa3-fcbc-4ca2-91fc-4db9ea25b2ea",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 8 and Offer 2",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID Payment 8 and Offer 2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "37a4c783-bf7f-4c7f-8d47-31fee94b3128",
                  "parentUUID": "5087eaa3-fcbc-4ca2-91fc-4db9ea25b2ea",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8 different and 2 commercial",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID 8 different and 2 commercial",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"product\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"history\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"cover\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"collect\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"articles\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"subscribtion\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"event\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2c38bb75-f1fa-41ff-84ae-a1d977daf18a",
                  "parentUUID": "5087eaa3-fcbc-4ca2-91fc-4db9ea25b2ea",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "37a4c783-bf7f-4c7f-8d47-31fee94b3128",
                "2c38bb75-f1fa-41ff-84ae-a1d977daf18a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "dc7f966d-0697-455a-bc44-c25c882bf3be",
          "title": "TEXT.INVALID_H2_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
          "file": "\\test\\test-text-position-h2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c5f56da0-a619-44ca-813c-8cde23694449",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "bd185282-17d0-435b-9bff-b230716ddb19",
                  "parentUUID": "c5f56da0-a619-44ca-813c-8cde23694449",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "a98b0518-2bfc-492f-8afd-a4e95560116d",
                  "parentUUID": "c5f56da0-a619-44ca-813c-8cde23694449",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before internal nested h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n            ]\n        }            \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 22, \"line\": 10 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0c717dfe-2c2d-4547-a484-1f3e022499c9",
                  "parentUUID": "c5f56da0-a619-44ca-813c-8cde23694449",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bd185282-17d0-435b-9bff-b230716ddb19",
                "a98b0518-2bfc-492f-8afd-a4e95560116d",
                "0c717dfe-2c2d-4547-a484-1f3e022499c9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d520cdeb-0e6d-4522-9368-4ffd0c94b21e",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "16a3fa76-6d63-4626-a6a2-aa7abe16f1c0",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2840acaa-22aa-473c-a2f6-01aa0c286056",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" }\n        },\n        { \n            \"block\": \"card\", \n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6d9315b0-440e-423a-9e2c-a1bbae486608",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before nested internal h2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "55890971-a45e-4f30-a71e-b7a167e86cda",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1 but in other node",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before h1 but in other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": {\n                \"block\": \"form\",\n                \"content\": \n                    { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            }\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7b2f6f51-ac5c-421e-be77-19b9658b2e10",
                  "parentUUID": "55daebd0-0636-42be-bf67-e1629e3a2a0f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d520cdeb-0e6d-4522-9368-4ffd0c94b21e",
                "16a3fa76-6d63-4626-a6a2-aa7abe16f1c0",
                "2840acaa-22aa-473c-a2f6-01aa0c286056",
                "6d9315b0-440e-423a-9e2c-a1bbae486608",
                "55890971-a45e-4f30-a71e-b7a167e86cda",
                "7b2f6f51-ac5c-421e-be77-19b9658b2e10"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4868d9bf-25a9-47a1-b15c-52be07d716ad",
          "title": "TEXT.INVALID_H3_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
          "file": "\\test\\test-text-position-h3.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e3c0d9e2-b445-4a6b-a7ff-e832a2d6f575",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "da6576ad-24fc-41fa-a914-9f367a28f8df",
                  "parentUUID": "e3c0d9e2-b445-4a6b-a7ff-e832a2d6f575",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID h3 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "13b1c43b-19d8-4171-b854-1ce6ccd53373",
                  "parentUUID": "e3c0d9e2-b445-4a6b-a7ff-e832a2d6f575",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da6576ad-24fc-41fa-a914-9f367a28f8df",
                "13b1c43b-19d8-4171-b854-1ce6ccd53373"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "340d8b7e-9afc-45fe-8bd9-c54ae7e00777",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b871639b-0a18-41ec-8638-806fd054c0e4",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }        \n            ]\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "62aeed86-ee8b-460a-8b63-5bf1fc0736f3",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested internal h3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f872b609-dc0e-49c0-a7c4-676aa23ada52",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2 but on other node",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h3 before h2 but on other node",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"card\",\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ] \n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f8e960ea-b96c-4a97-8a91-c9209f735bfe",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test nested h3 before h2 but in deeper level",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Test nested h3 before h2 but in deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h3\" }\n            }\n        ]\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            }\n        ]\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1d161d14-86d2-43ce-b771-60ee4eeb40a9",
                  "parentUUID": "d29b5535-5920-4dc1-8fff-fc0fe835914a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "340d8b7e-9afc-45fe-8bd9-c54ae7e00777",
                "b871639b-0a18-41ec-8638-806fd054c0e4",
                "62aeed86-ee8b-460a-8b63-5bf1fc0736f3",
                "f872b609-dc0e-49c0-a7c4-676aa23ada52",
                "f8e960ea-b96c-4a97-8a91-c9209f735bfe",
                "1d161d14-86d2-43ce-b771-60ee4eeb40a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a0987d92-97c2-4ec3-8b2b-339584d4abef",
          "title": "TEXT.SEVERAL_H1",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
          "file": "\\test\\test-text-several-h1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 6 },\n            \"end\": { \"column\": 18, \"line\": 9 }\n        }\n    },\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 10 },\n            \"end\": { \"column\": 18, \"line\": 13 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "38e48072-0138-45da-8488-8a0532c2ffd6",
                  "parentUUID": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 5 },\n            \"end\": { \"column\": 66, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3612913b-d754-4fc6-bf2e-fcf52ae4b84f",
                  "parentUUID": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 on different levels",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID h1 on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 37, \"line\": 11 },\n            \"end\": { \"column\": 82, \"line\": 11 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "9cbad4f8-b407-4f46-b7b9-66d06e440d87",
                  "parentUUID": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        },\n        {\n            \"block\": \"card\",\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 18 },\n            \"end\": { \"column\": 74, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "7c71fbd4-a233-4a3d-beb7-6590f6c51f05",
                  "parentUUID": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Internal nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Internal nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"text\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h1\" },\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 8 },\n            \"end\": { \"column\": 74, \"line\": 8 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "cb4ccca4-743f-4ba6-876f-ba126deb747c",
                  "parentUUID": "c2a10af5-f5b9-4c01-95fc-4c593083fcf0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38e48072-0138-45da-8488-8a0532c2ffd6",
                "3612913b-d754-4fc6-bf2e-fcf52ae4b84f",
                "9cbad4f8-b407-4f46-b7b9-66d06e440d87",
                "7c71fbd4-a233-4a3d-beb7-6590f6c51f05",
                "cb4ccca4-743f-4ba6-876f-ba126deb747c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "fffd43d8-50d0-45ae-ab68-0590425312c0",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "92b2ce38-b9d2-4f98-a3cd-3b1e7ff06f03",
                  "parentUUID": "fffd43d8-50d0-45ae-ab68-0590425312c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID no sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\" },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1633460c-9846-4f1c-8cee-2a9b208309af",
                  "parentUUID": "fffd43d8-50d0-45ae-ab68-0590425312c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h1 and nested h4",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h1 and nested h4",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "66ec6b48-5caa-4417-8ba9-e8b1e55c26ca",
                  "parentUUID": "fffd43d8-50d0-45ae-ab68-0590425312c0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h4 and nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h4 and nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "81e13b60-6d64-4966-ae28-0d30146a433a",
                  "parentUUID": "fffd43d8-50d0-45ae-ab68-0590425312c0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "92b2ce38-b9d2-4f98-a3cd-3b1e7ff06f03",
                "1633460c-9846-4f1c-8cee-2a9b208309af",
                "66ec6b48-5caa-4417-8ba9-e8b1e55c26ca",
                "81e13b60-6d64-4966-ae28-0d30146a433a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ec650376-6976-45b1-af13-128e6b1066e3",
          "title": "WARNING.INVALID_BUTTON_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
          "file": "\\test\\test-warning-button-position.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "066722a3-240a-429c-9e08-15790116d512",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Button before placeholder on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 67, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "a1349f05-19f7-4eab-b0d9-7a1683663afe",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder on deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"placeholder\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 36, \"line\": 7 },\n                      \"end\": { \"column\": 26, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "4c560e3e-1ac6-4c07-a346-a5f28bd53cd0",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before placeholder, both on deeper levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before placeholder, both on deeper levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 75, \"line\": 9 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "adeaefa3-1c23-4cff-8974-97ca69c5ad6e",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before 2 placeholders",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before 2 placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 18 },\n                      \"end\": { \"column\": 67, \"line\": 18 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2602b35a-bdd1-4fd2-b11b-43931b2c89dc",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in one nested block",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in one nested block",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"button\",\n                      \"mods\": { \"size\": \"m\" },\n                      \"content\": [\n                          { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "e5e74e28-856e-4423-a4b0-a84accf1ce5f",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in block__elem items",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in block__elem items",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\",\n                      \"elem\": \"button-wrapper\",\n                      \"content\": [\n                          {\n                              \"block\": \"button\", \n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"warning\",\n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }         \n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 30, \"line\": 12 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "a5ec3bc9-6e54-44df-8508-5a10c9df5f20",
                  "parentUUID": "066722a3-240a-429c-9e08-15790116d512",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a1349f05-19f7-4eab-b0d9-7a1683663afe",
                "4c560e3e-1ac6-4c07-a346-a5f28bd53cd0",
                "adeaefa3-1c23-4cff-8974-97ca69c5ad6e",
                "2602b35a-bdd1-4fd2-b11b-43931b2c89dc",
                "e5e74e28-856e-4423-a4b0-a84accf1ce5f",
                "a5ec3bc9-6e54-44df-8508-5a10c9df5f20"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "26a6fd4e-3e1a-4533-bafb-60f5d359ecc4",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Placeholder and button on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder and button on the same level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a7cf6df9-3380-4c1b-adac-6c24bcf6e8cb",
                  "parentUUID": "26a6fd4e-3e1a-4533-bafb-60f5d359ecc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Button is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "3d3541b6-9eab-4264-9084-cedf371faa9e",
                  "parentUUID": "26a6fd4e-3e1a-4533-bafb-60f5d359ecc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Placeholder is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "3f945314-789d-47be-810f-8e2b6794dc70",
                  "parentUUID": "26a6fd4e-3e1a-4533-bafb-60f5d359ecc4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block and placeholder under button",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Not warning block and placeholder under button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "dcd96f1f-19b8-42d2-91ad-1389a6a75e9d",
                  "parentUUID": "26a6fd4e-3e1a-4533-bafb-60f5d359ecc4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7cf6df9-3380-4c1b-adac-6c24bcf6e8cb",
                "3d3541b6-9eab-4264-9084-cedf371faa9e",
                "3f945314-789d-47be-810f-8e2b6794dc70",
                "dcd96f1f-19b8-42d2-91ad-1389a6a75e9d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0ad46c18-07fb-4077-914e-9354c494dd6f",
          "title": "WARNING.INVALID_BUTTON_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
          "file": "\\test\\test-warning-button-sizes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid button sizes, equal or bigger than s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or bigger than s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 68, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "372ba31d-36a2-41bd-96ae-d5884c38b934",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, equal or smaller than xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or smaller than xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 67, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "13ed5d6a-3418-47ea-b0c5-05416ebee88a",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button size xxxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button size xxxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 78, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "87bd5308-39bf-4d5e-9618-ee5c257247cf",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, text and non-text blocks in array",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, text and non-text blocks in array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"not-a-text-block\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 68, \"line\": 7 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "02adb9f5-b288-4ace-a764-87ef3eaf0043",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Buttons are on deeper levels than etalon text",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Buttons are on deeper levels than etalon text",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 11 },\n                      \"end\": { \"column\": 83, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "8940e2ee-5b28-48bd-a171-03b3f3d31096",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is on deeper level than buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is on deeper level than buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 16 },\n                      \"end\": { \"column\": 83, \"line\": 16 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "54e485b2-b202-4fa7-8616-8d6d3bf014ac",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty button size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid empty button size",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "5945f29c-30c9-4876-8ea6-70a0ae8aa04f",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size in button mods",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No size in button mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"prop\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "db8af6f0-7822-4624-90e1-18333f447491",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No mods in button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\" }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 42, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "3a7ead2d-3df2-4e6a-b6f3-e36df1b5bb36",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is under buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is under buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 10 },\n                      \"end\": { \"column\": 83, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "e338c670-347d-4efe-ba4a-c0cb4a72c82c",
                  "parentUUID": "d42fb376-f1b7-47ce-adad-da4bce6737e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "372ba31d-36a2-41bd-96ae-d5884c38b934",
                "13ed5d6a-3418-47ea-b0c5-05416ebee88a",
                "87bd5308-39bf-4d5e-9618-ee5c257247cf",
                "02adb9f5-b288-4ace-a764-87ef3eaf0043",
                "8940e2ee-5b28-48bd-a171-03b3f3d31096",
                "54e485b2-b202-4fa7-8616-8d6d3bf014ac",
                "5945f29c-30c9-4876-8ea6-70a0ae8aa04f",
                "db8af6f0-7822-4624-90e1-18333f447491",
                "3a7ead2d-3df2-4e6a-b6f3-e36df1b5bb36",
                "e338c670-347d-4efe-ba4a-c0cb4a72c82c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f051af41-34d6-4c4e-9f3f-40084b285a99",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid xl-button size after l-size text block ",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid xl-button size after l-size text block ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "4545652a-1810-4122-9a15-ab1889b7bf0a",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size s",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e701a9e7-244a-45ab-8114-62fcf0f4d178",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size m",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size m",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9154a6d6-a248-4928-83c9-bf960dbb9274",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size l",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9ae88168-ae7b-4a5e-9707-eb03d5e6f0e4",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c3d68d09-aeb8-4154-bcb5-c14bf073165a",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xxl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c844d75f-58de-40cf-ab12-b839ba90d6e3",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text and button on the different levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Text and button on the different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"l\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ab0c5d09-f03c-4e56-aa2e-678c5872b1e0",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "4a7b91ab-19ba-4178-9788-62211692ebbc",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text on deeper level after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text on deeper level after button",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "24b699d6-83a0-491d-a6ae-8f5eb97f1955",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button m-size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button m-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"m\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ca995741-9dba-461d-b06f-276460b4d367",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button empty size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button empty size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "85cc27a0-f9b9-45e8-9b5a-e5f20f5864e6",
                  "parentUUID": "f051af41-34d6-4c4e-9f3f-40084b285a99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4545652a-1810-4122-9a15-ab1889b7bf0a",
                "e701a9e7-244a-45ab-8114-62fcf0f4d178",
                "9154a6d6-a248-4928-83c9-bf960dbb9274",
                "9ae88168-ae7b-4a5e-9707-eb03d5e6f0e4",
                "c3d68d09-aeb8-4154-bcb5-c14bf073165a",
                "c844d75f-58de-40cf-ab12-b839ba90d6e3",
                "ab0c5d09-f03c-4e56-aa2e-678c5872b1e0",
                "4a7b91ab-19ba-4178-9788-62211692ebbc",
                "24b699d6-83a0-491d-a6ae-8f5eb97f1955",
                "ca995741-9dba-461d-b06f-276460b4d367",
                "85cc27a0-f9b9-45e8-9b5a-e5f20f5864e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "28a3b7f9-6956-4c0b-915a-13f0cfa71e3a",
          "title": "WARNING.INVALID_PLACEHOLDER_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
          "file": "\\test\\test-warning-placeholder-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b443a666-4dad-438a-9d92-12bc1fe2836b",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in 2 sequential placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in 2 sequential placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xl\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xxl\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 4 },\n                      \"end\": { \"column\": 22, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "06eab15e-3721-488a-ab7d-ee0b24bcca94",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxl\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxxl\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"xxxxl\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 7 },\n                      \"end\": { \"column\": 30, \"line\": 10 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 11 },\n                      \"end\": { \"column\": 30, \"line\": 18 }\n                  }\n              }\n              ,\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 45, \"line\": 14 },\n                      \"end\": { \"column\": 34, \"line\": 17 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "7fabd565-24a7-4612-b941-6eee79a400c8",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid empty size in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "b860fe77-2df3-4d70-8d7f-53b6df6335a1",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No mods in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "89b1a8d2-80b3-46a6-b8d7-b98732ac4307",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size property in placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No size property in placeholder mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"prop\": \"m\", \"prop2\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "c837becc-fb6d-4b01-a6ff-91a96e3cfa43",
                  "parentUUID": "41afe8b3-297a-41f8-a277-34747d1ed2d1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b443a666-4dad-438a-9d92-12bc1fe2836b",
                "06eab15e-3721-488a-ab7d-ee0b24bcca94",
                "7fabd565-24a7-4612-b941-6eee79a400c8",
                "b860fe77-2df3-4d70-8d7f-53b6df6335a1",
                "89b1a8d2-80b3-46a6-b8d7-b98732ac4307",
                "c837becc-fb6d-4b01-a6ff-91a96e3cfa43"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 6,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid l-size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "fb338cb1-2a83-49e8-9d69-35871b93f6fa",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid l-size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "09b00086-180d-4359-835d-583f65a087e4",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"s\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"m\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"l\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7d220664-f8db-4744-9ae6-be027a4c3d71",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with non-valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with non-valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d0911768-57e8-4b12-a155-a93ba628bafc",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with empty placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with empty placeholder size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a23001b4-a95c-4716-b77c-ff1351f33a0b",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with no placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with no placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "55a4f7de-952f-4746-88ac-19ec316e9a0d",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID no warning block with valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "b06f4197-1599-4bc2-b98e-1f3838a640a0",
                  "parentUUID": "7ae127da-ac63-4c50-a7ea-61d40481f3ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fb338cb1-2a83-49e8-9d69-35871b93f6fa",
                "09b00086-180d-4359-835d-583f65a087e4",
                "7d220664-f8db-4744-9ae6-be027a4c3d71",
                "d0911768-57e8-4b12-a155-a93ba628bafc",
                "a23001b4-a95c-4716-b77c-ff1351f33a0b",
                "55a4f7de-952f-4746-88ac-19ec316e9a0d",
                "b06f4197-1599-4bc2-b98e-1f3838a640a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa85e308-5954-480b-a902-95079d1a6a08",
          "title": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
          "file": "\\test\\test-warning-text-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 2 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n\"block\": \"warning\",\n\"content\": [\n    {\n        \"block\": \"placeholder\",\n        \"mods\": { \"size\": \"m\" }\n    },\n    {\n        \"elem\": \"content\",\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"m\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"l\" }\n            }\n        ]\n    }\n]\n            }`;\n            const result = lint(inputJson);\n            expect(result).to.be.an('array').that.is.deep.equal([\n{\n    \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n    \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n    \"location\": {\n        \"start\": { \"column\": 1, \"line\": 1 },\n        \"end\": { \"column\": 14, \"line\": 22 }\n    }\n}\n            ]);",
                  "err": {},
                  "uuid": "8dbc145a-19b3-4d5a-871a-ddf27c73c037",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 3 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"placeholder\",\n            \"mods\": { \"size\": \"m\" }\n        },\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 26 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "5e737134-e0a4-44e3-b869-f5be2f721097",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning blocks, empty lines",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID nested warning blocks, empty lines",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n{\n    \"block\": \"warning\",\n    \"content\": {\n        \"block\": \"warning\",\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 28, \"line\": 4 },\n            \"end\": { \"column\": 18, \"line\": 22 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "fb855dfe-86ad-486c-b9ca-97dd264435ad",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested text blocks with different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested text blocks with different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": \n    {\n        \"block\": \"text\",\n        \"mods\": { \"size\": \"s\" },\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 23 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e1d3b311-eedd-4a36-a25f-6b5f8843dc1b",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text blocks with different sizes on different levels",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text blocks with different sizes on different levels",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"s\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0cd46e92-b83e-436a-889a-01b04cfa68bc",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\"                        \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "7889c09e-d449-409c-9949-d63a94a75ff3",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\"\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "1082ecf2-140f-41ba-82bc-63d21b6d2553",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without size in mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"prop\": \"m\" }    \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "e94832af-7dcc-4c3f-8777-d6c7ec1f9534",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without size in mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"prop\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "dc578a6c-44a9-4f54-836b-3285ef135342",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "5779d8e3-c900-4e5f-96d7-0e14f245ab5d",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"xl\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "c90c4079-7504-4104-9ca1-e605ccd219a2",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested warning elements of different text sizes inside one warning block",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested warning elements of different text sizes inside one warning block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n                  \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n                  \"location\": {\n                      \"start\": { \"column\": 1, \"line\": 1 },\n                      \"end\": { \"column\": 14, \"line\": 21 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "17c134b4-59ea-4479-9936-ebf5251fc2f9",
                  "parentUUID": "ad3c7cc1-2fa4-4baa-8dcf-eca21f8e64c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8dbc145a-19b3-4d5a-871a-ddf27c73c037",
                "5e737134-e0a4-44e3-b869-f5be2f721097",
                "fb855dfe-86ad-486c-b9ca-97dd264435ad",
                "e1d3b311-eedd-4a36-a25f-6b5f8843dc1b",
                "0cd46e92-b83e-436a-889a-01b04cfa68bc",
                "7889c09e-d449-409c-9949-d63a94a75ff3",
                "1082ecf2-140f-41ba-82bc-63d21b6d2553",
                "e94832af-7dcc-4c3f-8777-d6c7ec1f9534",
                "dc578a6c-44a9-4f54-836b-3285ef135342",
                "5779d8e3-c900-4e5f-96d7-0e14f245ab5d",
                "c90c4079-7504-4104-9ca1-e605ccd219a2",
                "17c134b4-59ea-4479-9936-ebf5251fc2f9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 text blocks of size-l",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 2 text blocks of size-l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  [\n                      { \n                          \"block\": \"placeholder\",\n                          \"mods\": { \"size\": \"m\" }\n                      },\n                      {  \n                          \"elem\": \"content\",\n                          \"content\": \n                              [\n                                  { \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  },\n                                  {  \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  }\n                              ]\n                      }\n                  ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2ef768b5-94ae-437d-8141-89f892e21df3",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 text blocks of size-m, 3rd level children,content is object",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 text blocks of size-m, 3rd level children,content is object",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": \n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      }\n                                  ]\n                          }\n                  }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "02ebd9aa-bac5-40d7-be26-7719d5e43384",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 nested warning blocks of different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 nested warning blocks of different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {\n                              \"block\": \"warning\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      }\n                                  ]\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "a0aa437f-2126-46a9-916a-77031c5d6acf",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with non-equal text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with non-equal text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"l\" }\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "57442ba2-97a1-44e8-9290-1fd16d276115",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with not set text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with not set text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"prop\": \"l\" }\n                          },\n                          {  \n                              \"block\": \"text\"\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "815a700f-2dba-4ab2-8978-3cf62bf9791d",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Separate nested warning blocks with different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID Separate nested warning blocks with different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  {\"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          {\n                              \"block\": \"warning\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "62ebb274-5110-4564-9969-a25faf8160e7",
                  "parentUUID": "cf622ecb-8982-4e66-9fb3-2abdac5417e6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2ef768b5-94ae-437d-8141-89f892e21df3",
                "02ebd9aa-bac5-40d7-be26-7719d5e43384",
                "a0aa437f-2126-46a9-916a-77031c5d6acf",
                "57442ba2-97a1-44e8-9290-1fd16d276115",
                "815a700f-2dba-4ab2-8978-3cf62bf9791d",
                "62ebb274-5110-4564-9969-a25faf8160e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "94644c81-a1c3-4e70-a7a1-e32d974465ce",
          "title": "Simple input",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty input",
              "fullTitle": "Simple input empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "70d46a5f-4679-4b99-bf3e-994c45821e05",
              "parentUUID": "94644c81-a1c3-4e70-a7a1-e32d974465ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty object",
              "fullTitle": "Simple input empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "2fc3b5bd-adcc-43c7-ada4-12ea8b889a36",
              "parentUUID": "94644c81-a1c3-4e70-a7a1-e32d974465ce",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty warning",
              "fullTitle": "Simple input empty warning",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{ \"block\": \"warning\"}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "632450fb-d33a-4351-b5d6-dbff4b774c33",
              "parentUUID": "94644c81-a1c3-4e70-a7a1-e32d974465ce",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "70d46a5f-4679-4b99-bf3e-994c45821e05",
            "2fc3b5bd-adcc-43c7-ada4-12ea8b889a36",
            "632450fb-d33a-4351-b5d6-dbff4b774c33"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}