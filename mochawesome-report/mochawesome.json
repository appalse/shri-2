{
  "stats": {
    "suites": 25,
    "tests": 95,
    "passes": 95,
    "pending": 0,
    "failures": 0,
    "start": "2020-01-14T11:11:56.312Z",
    "end": "2020-01-14T11:11:56.449Z",
    "duration": 137,
    "testsRegistered": 95,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "33582319-0fda-4d76-bf89-cef5ea4a52a8",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e0985549-d3ff-473e-a1d4-2f0bc1b2807f",
          "title": "GRID.TOO_MUCH_MARKETING_BLOCKS",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
          "file": "\\test\\test-grid.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "82128048-cdf3-4099-a617-776553b2e5da",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 2 and Offer 8",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID Payment 2 and Offer 8",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 32 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "30b756e0-e2e2-4094-a098-3cc99e9f4f89",
                  "parentUUID": "82128048-cdf3-4099-a617-776553b2e5da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 warning and 3 marketings",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS INVALID 3 warning and 3 marketings",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"6\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"3\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"GRID.TOO_MUCH_MARKETING_BLOCKS\",\n        \"error\": \"Маркетинговые блоки занимают больше половины или ровно половину от всех колонок блока grid\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 15, \"line\": 56 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "0653587a-7397-49eb-8bad-da27fe2b6a2b",
                  "parentUUID": "82128048-cdf3-4099-a617-776553b2e5da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "30b756e0-e2e2-4094-a098-3cc99e9f4f89",
                "0653587a-7397-49eb-8bad-da27fe2b6a2b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4035e95c-0dd1-4e8f-8699-2c3b4f090c09",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-grid.js",
              "file": "\\test\\test-grid.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Payment 8 and Offer 2",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID Payment 8 and Offer 2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"8\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"payment\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"offer\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ba888b71-a201-4f27-9fda-65805042e24d",
                  "parentUUID": "4035e95c-0dd1-4e8f-8699-2c3b4f090c09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "8 different and 2 commercial",
                  "fullTitle": "GRID.TOO_MUCH_MARKETING_BLOCKS VALID 8 different and 2 commercial",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"grid\",\n    \"mods\": {\n        \"m-columns\": \"10\"\n    },\n    \"content\": [\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"warning\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"product\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"history\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"cover\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"collect\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"articles\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"subscribtion\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"1\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"event\"\n                }\n            ]\n        },\n        {\n            \"block\": \"grid\",\n            \"elem\": \"fraction\",\n            \"elemMods\": {\n                \"m-col\": \"2\"\n            },\n            \"content\": [\n                {\n                    \"block\": \"commercial\"\n                }\n            ]\n        }\n    ]\n }`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c5c2933f-f977-4355-abff-5f6097721283",
                  "parentUUID": "4035e95c-0dd1-4e8f-8699-2c3b4f090c09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ba888b71-a201-4f27-9fda-65805042e24d",
                "c5c2933f-f977-4355-abff-5f6097721283"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ae7ebdec-df0b-4fbe-84d4-d4674cfde485",
          "title": "TEXT.INVALID_H2_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
          "file": "\\test\\test-text-position-h2.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "96478437-56a5-4115-ada6-728501bd69cc",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "4c480854-2d00-460e-b10e-8d5eced368e3",
                  "parentUUID": "96478437-56a5-4115-ada6-728501bd69cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "27448dcc-c396-41a4-973a-900f1c05da20",
                  "parentUUID": "96478437-56a5-4115-ada6-728501bd69cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before internal nested h1",
                  "fullTitle": "TEXT.INVALID_H2_POSITION INVALID h2 before internal nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n            ]\n        }            \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H2_POSITION\",\n        \"error\": \"Заголовок второго уровня не может находиться перед заголовком первого уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 22, \"line\": 10 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "a2402d95-ccfc-4d83-95da-427ff82fdaf7",
                  "parentUUID": "96478437-56a5-4115-ada6-728501bd69cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4c480854-2d00-460e-b10e-8d5eced368e3",
                "27448dcc-c396-41a4-973a-900f1c05da20",
                "a2402d95-ccfc-4d83-95da-427ff82fdaf7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "60284f78-018a-4188-8b16-051875e06a60",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h2.js",
              "file": "\\test\\test-text-position-h2.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "8b8f04f0-0520-4b20-82a5-4dffc63215dd",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ec78c284-44e5-4424-95c2-bac84da8addf",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f6c6c91b-c827-4b49-bcab-38b80ace42ae",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 before nested h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h1 before nested h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h1\" }\n        },\n        { \n            \"block\": \"card\", \n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "adcf350f-bc54-467f-a25b-2d2e1c5e7d1f",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h2",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before nested internal h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9e2bc787-15fe-45d0-86ff-e65c5775f2bd",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h1 but in other node",
                  "fullTitle": "TEXT.INVALID_H2_POSITION VALID h2 before h1 but in other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": {\n                \"block\": \"form\",\n                \"content\": \n                    { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n            }\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "26a84d51-7314-40a3-91c1-4a928fc40704",
                  "parentUUID": "60284f78-018a-4188-8b16-051875e06a60",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b8f04f0-0520-4b20-82a5-4dffc63215dd",
                "ec78c284-44e5-4424-95c2-bac84da8addf",
                "f6c6c91b-c827-4b49-bcab-38b80ace42ae",
                "adcf350f-bc54-467f-a25b-2d2e1c5e7d1f",
                "9e2bc787-15fe-45d0-86ff-e65c5775f2bd",
                "26a84d51-7314-40a3-91c1-4a928fc40704"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "185f2a7d-aaa6-41d6-8313-bd88c48d353a",
          "title": "TEXT.INVALID_H3_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
          "file": "\\test\\test-text-position-h3.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "7a4f1b9a-6349-4881-a8de-d1d35910b58a",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 2 },\n            \"end\": { \"column\": 18, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "2133a720-3cb4-4d53-943e-e581bed4cd10",
                  "parentUUID": "7a4f1b9a-6349-4881-a8de-d1d35910b58a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2",
                  "fullTitle": "TEXT.INVALID_H3_POSITION INVALID h3 before h2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.INVALID_H3_POSITION\",\n        \"error\": \"Заголовок третьего уровня не может находиться перед заголовком второго уровня на том же или более глубоком уровне вложенности\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 4 },\n            \"end\": { \"column\": 66, \"line\": 4 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "9482af82-ddc0-4870-9aa2-c08a724ad94f",
                  "parentUUID": "7a4f1b9a-6349-4881-a8de-d1d35910b58a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2133a720-3cb4-4d53-943e-e581bed4cd10",
                "9482af82-ddc0-4870-9aa2-c08a724ad94f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "10edb474-03df-443c-9479-feaa4ceffbcc",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-position-h3.js",
              "file": "\\test\\test-text-position-h3.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h2\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h3\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "28cb7bb1-4ff7-4a25-a3a9-86ceb8b2b448",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "53227134-43d3-4bcf-bb13-87c0dd455c6e",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }        \n            ]\n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6ee7a3df-690d-4540-ab3a-68587eef1b5a",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h2 before nested internal h3",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h2 before nested internal h3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"text\", \n            \"mods\": { \"type\": \"h2\" },\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "3f9d91a6-9da5-49ca-a016-0590e69026c0",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h3 before h2 but on other node",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID h3 before h2 but on other node",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \n            \"block\": \"card\",\n            \"content\": [\n                { \"block\": \"text\", \"mods\": { \"type\": \"h3\" } }        \n            ] \n        },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h2\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "67528738-630c-4bc2-8e5b-9611dd939f73",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Test nested h3 before h2 but in deeper level",
                  "fullTitle": "TEXT.INVALID_H3_POSITION VALID Test nested h3 before h2 but in deeper level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h3\" }\n            }\n        ]\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"p\" },\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"type\": \"h2\" }\n            }\n        ]\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "6f4d473c-c0da-4c4c-9596-e3a61cbf95ca",
                  "parentUUID": "10edb474-03df-443c-9479-feaa4ceffbcc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "28cb7bb1-4ff7-4a25-a3a9-86ceb8b2b448",
                "53227134-43d3-4bcf-bb13-87c0dd455c6e",
                "6ee7a3df-690d-4540-ab3a-68587eef1b5a",
                "3f9d91a6-9da5-49ca-a016-0590e69026c0",
                "67528738-630c-4bc2-8e5b-9611dd939f73",
                "6f4d473c-c0da-4c4c-9596-e3a61cbf95ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4561727f-eed2-4f5e-a9ee-4fdfd6114d18",
          "title": "TEXT.SEVERAL_H1",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
          "file": "\\test\\test-text-several-h1.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "245f6c3b-e7d0-4708-a132-518867536388",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    },\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 6 },\n            \"end\": { \"column\": 18, \"line\": 9 }\n        }\n    },\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 17, \"line\": 10 },\n            \"end\": { \"column\": 18, \"line\": 13 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "5d2530d2-6560-4639-b4b3-5e2f2f7cf7fc",
                  "parentUUID": "245f6c3b-e7d0-4708-a132-518867536388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 sequential h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 21, \"line\": 5 },\n            \"end\": { \"column\": 66, \"line\": 5 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "faba3e90-3b71-4896-9fbf-85f9249622a5",
                  "parentUUID": "245f6c3b-e7d0-4708-a132-518867536388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "h1 on different levels",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID h1 on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 37, \"line\": 11 },\n            \"end\": { \"column\": 82, \"line\": 11 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "1af5edfb-b34c-4e1e-bfb2-25b4e0111ada",
                  "parentUUID": "245f6c3b-e7d0-4708-a132-518867536388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID 2 nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        },\n        {\n            \"block\": \"card\",\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 18 },\n            \"end\": { \"column\": 74, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "4345278c-c196-4b23-99c0-fddf3dc4c812",
                  "parentUUID": "245f6c3b-e7d0-4708-a132-518867536388",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Internal nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 INVALID Internal nested h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"text\",\n    \"content\": [\n        {\n            \"block\": \"text\",\n            \"mods\": { \"type\": \"h1\" },\n            \"content\": \n                { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"TEXT.SEVERAL_H1\",\n        \"error\": \"Заголовок первого уровня должен быть единственным на странице\",\n        \"location\": {\n            \"start\": { \"column\": 29, \"line\": 8 },\n            \"end\": { \"column\": 74, \"line\": 8 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "191f835e-88a3-4fcc-ad73-a6274e65618b",
                  "parentUUID": "245f6c3b-e7d0-4708-a132-518867536388",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d2530d2-6560-4639-b4b3-5e2f2f7cf7fc",
                "faba3e90-3b71-4896-9fbf-85f9249622a5",
                "1af5edfb-b34c-4e1e-bfb2-25b4e0111ada",
                "4345278c-c196-4b23-99c0-fddf3dc4c812",
                "191f835e-88a3-4fcc-ad73-a6274e65618b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7aa4b0dd-5934-457b-ab0f-66050e7dd20f",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-text-several-h1.js",
              "file": "\\test\\test-text-several-h1.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Input array as in example",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Input array as in example",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `[\n    {\n        \"block\": \"text\",\n        \"mods\": { \"type\": \"h1\" }\n    }\n]`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "1dcbcb85-4b09-4f73-8724-625895b6dd11",
                  "parentUUID": "7aa4b0dd-5934-457b-ab0f-66050e7dd20f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no sequential h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID no sequential h1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\" },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "2838fabc-deb2-4dac-b2b7-8d54bf680b40",
                  "parentUUID": "7aa4b0dd-5934-457b-ab0f-66050e7dd20f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h1 and nested h4",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h1 and nested h4",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "17d69021-b14e-4956-b434-2dd2d5bf4284",
                  "parentUUID": "7aa4b0dd-5934-457b-ab0f-66050e7dd20f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Single h4 and nested h1",
                  "fullTitle": "TEXT.SEVERAL_H1 VALID Single h4 and nested h1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"page\",\n    \"content\": [\n        { \"block\": \"text\", \"mods\": { \"type\": \"h4\" } },\n        {\n            \"block\": \"card\",\n            \"content\": [\n                {\n                    \"block\": \"form\",\n                    \"content\": [\n                        { \"block\": \"text\", \"mods\": { \"type\": \"h1\" } }\n                    ]\n                }\n            ]\n        }\n        \n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c1c91eee-ffbf-4b32-b28c-30e1f1b5ca0a",
                  "parentUUID": "7aa4b0dd-5934-457b-ab0f-66050e7dd20f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1dcbcb85-4b09-4f73-8724-625895b6dd11",
                "2838fabc-deb2-4dac-b2b7-8d54bf680b40",
                "17d69021-b14e-4956-b434-2dd2d5bf4284",
                "c1c91eee-ffbf-4b32-b28c-30e1f1b5ca0a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e8fa5f0-52bf-4d64-a996-73ca230eb1dc",
          "title": "WARNING.INVALID_BUTTON_POSITION",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
          "file": "\\test\\test-warning-button-position.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6de353fe-e254-4659-b666-24cb1e406827",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Button before placeholder on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 67, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "767797ca-7eb6-4a31-ae64-be1d0d8665eb",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder on deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder on deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"placeholder\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 36, \"line\": 7 },\n                      \"end\": { \"column\": 26, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "2d70c3c9-6e6e-4532-b02e-2b232a73ce19",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before placeholder, both on deeper levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before placeholder, both on deeper levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 75, \"line\": 9 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "311f6b9b-a33e-45db-8c78-6c23cb54da44",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "2 buttons before 2 placeholders",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID 2 buttons before 2 placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"placeholder\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 75, \"line\": 8 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 18 },\n                      \"end\": { \"column\": 67, \"line\": 18 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "73535364-0d90-4db3-83ad-cd7934427930",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in one nested block",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in one nested block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"button\",\n                      \"mods\": { \"size\": \"m\" },\n                      \"content\": [\n                          { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "c8802c4e-3493-49a9-bd4b-3bf7d3485c64",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button before placeholder in block__elem items",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION INVALID Button before placeholder in block__elem items",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\",\n                      \"elem\": \"button-wrapper\",\n                      \"content\": [\n                          {\n                              \"block\": \"button\", \n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"warning\",\n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }         \n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_POSITION\",\n                  \"error\": \"Блок button в блоке warning не может находиться перед блоком placeholder на том же или более глубоком уровне вложенности\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 9 },\n                      \"end\": { \"column\": 30, \"line\": 12 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "fbfd5eab-6c6b-47ed-a241-80d24d9d4d4c",
                  "parentUUID": "6de353fe-e254-4659-b666-24cb1e406827",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "767797ca-7eb6-4a31-ae64-be1d0d8665eb",
                "2d70c3c9-6e6e-4532-b02e-2b232a73ce19",
                "311f6b9b-a33e-45db-8c78-6c23cb54da44",
                "73535364-0d90-4db3-83ad-cd7934427930",
                "c8802c4e-3493-49a9-bd4b-3bf7d3485c64",
                "fbfd5eab-6c6b-47ed-a241-80d24d9d4d4c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1f6ac398-242f-4b77-b476-18903ea4f96b",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-position.js",
              "file": "\\test\\test-warning-button-position.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Placeholder and button on the same level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder and button on the same level",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e40c673b-b43d-440d-8a2b-fd3800d9b2bb",
                  "parentUUID": "1f6ac398-242f-4b77-b476-18903ea4f96b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Button is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Button is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \"block\": \"placeholder\", \"mods\": { \"size\": \"m\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "68d23cd0-3581-49d8-bff5-9d2e20b4cdb7",
                  "parentUUID": "1f6ac398-242f-4b77-b476-18903ea4f96b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Placeholder is on the deeper level",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Placeholder is on the deeper level",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "80139f6e-73d1-478a-884a-290a01132bf3",
                  "parentUUID": "1f6ac398-242f-4b77-b476-18903ea4f96b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block and placeholder under button",
                  "fullTitle": "WARNING.INVALID_BUTTON_POSITION VALID Not warning block and placeholder under button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"m\" }\n                      }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"placeholder\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c5fde1f3-eb21-45b6-8154-47d12023c8d5",
                  "parentUUID": "1f6ac398-242f-4b77-b476-18903ea4f96b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e40c673b-b43d-440d-8a2b-fd3800d9b2bb",
                "68d23cd0-3581-49d8-bff5-9d2e20b4cdb7",
                "80139f6e-73d1-478a-884a-290a01132bf3",
                "c5fde1f3-eb21-45b6-8154-47d12023c8d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fea9aa5b-d0db-41df-9a31-d57fd5626443",
          "title": "WARNING.INVALID_BUTTON_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
          "file": "\\test\\test-warning-button-sizes.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid button sizes, equal or bigger than s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or bigger than s",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xs\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 68, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "86364af4-dc85-453e-812f-9ac265ee9e04",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, equal or smaller than xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, equal or smaller than xl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 68, \"line\": 5 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 6 },\n                      \"end\": { \"column\": 67, \"line\": 6 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 67, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 67, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "1d38c9e6-ef4c-4d98-8337-463dfd662bd3",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button size xxxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button size xxxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 8 },\n                      \"end\": { \"column\": 78, \"line\": 8 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "5b69f0a6-f897-4307-8d78-a754e5aee79b",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid button sizes, text and non-text blocks in array",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid button sizes, text and non-text blocks in array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"not-a-text-block\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 7 },\n                      \"end\": { \"column\": 68, \"line\": 7 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "6bec4451-c50e-49ba-af5d-7a5e079d00c8",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Buttons are on deeper levels than etalon text",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Buttons are on deeper levels than etalon text",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 11 },\n                      \"end\": { \"column\": 83, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "a09bee73-9ec5-4bb4-a727-4b0c75cd2505",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is on deeper level than buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is on deeper level than buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 16 },\n                      \"end\": { \"column\": 83, \"line\": 16 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "540b9ebe-19fd-42db-882c-977b261242ce",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty button size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Invalid empty button size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "5bc989d6-48ba-4e6a-a7b4-caa39014245e",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size in button mods",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No size in button mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\", \"mods\": { \"prop\": \"\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 66, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "bd808e9d-afce-47c5-babc-e43b43cb65ab",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID No mods in button",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                  { \"block\": \"button\" }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 5 },\n                      \"end\": { \"column\": 42, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "a579d559-6e3f-4645-921e-36a5eeffe0d6",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text is under buttons",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE INVALID Etalon text is under buttons",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          {\n                              \"block\": \"more-deeper-block\",\n                              \"content\": \n                                  { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                          }\n                      ]\n                  },\n                  {\n                      \"block\": \"deeper-block\",\n                      \"content\" : [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_BUTTON_SIZE\",\n                  \"error\": \"Размер кнопки блока warning должен быть на 1 шаг больше эталонного\",\n                  \"location\": {\n                      \"start\": { \"column\": 37, \"line\": 10 },\n                      \"end\": { \"column\": 83, \"line\": 10 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "74d534de-3563-4674-84f9-03badb9678c4",
                  "parentUUID": "bed38f3b-400d-4dff-8e32-b3984186c3ff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "86364af4-dc85-453e-812f-9ac265ee9e04",
                "1d38c9e6-ef4c-4d98-8337-463dfd662bd3",
                "5b69f0a6-f897-4307-8d78-a754e5aee79b",
                "6bec4451-c50e-49ba-af5d-7a5e079d00c8",
                "a09bee73-9ec5-4bb4-a727-4b0c75cd2505",
                "540b9ebe-19fd-42db-882c-977b261242ce",
                "5bc989d6-48ba-4e6a-a7b4-caa39014245e",
                "bd808e9d-afce-47c5-babc-e43b43cb65ab",
                "a579d559-6e3f-4645-921e-36a5eeffe0d6",
                "74d534de-3563-4674-84f9-03badb9678c4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-button-sizes.js",
              "file": "\\test\\test-warning-button-sizes.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid xl-button size after l-size text block ",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid xl-button size after l-size text block ",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                  { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "e32f9373-0001-435a-87ca-1e00f041bda0",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size s",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size s",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xs\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"s\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "7301e955-35f8-443f-9af1-b1fe86112127",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size m",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size m",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "c0343260-9e62-4d3f-a5f2-eddf1ab47ae9",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size l",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "11fff80b-f617-4e5c-b12d-25354746b947",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xl",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "518a4446-9272-4292-8df8-8a8d7e835f26",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid button size xxl",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Valid button size xxl",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": \n                  {\n                      \"block\": \"warning\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"xl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } },\n                          { \"block\": \"button\", \"mods\": { \"size\": \"xxl\" } }\n                      ]\n                  }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "5c4db229-03cb-440b-9d49-57536e1d2fe1",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text and button on the different levels",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Text and button on the different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": {\n                          \"block\": \"button\", \n                          \"mods\": { \"size\": \"l\" }\n                      }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "34a9fc23-d9c8-447e-8d54-461a43f039dd",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "8d9a6c68-d5f1-49ce-ac73-7ae49699e16d",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text on deeper level after button",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Etalon text on deeper level after button",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "0e48d73e-a69e-4fef-9ed6-65452ec72cc6",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button m-size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button m-size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"m\" }\n                  },\n                  { \n                      \"block\": \"some-deeper-block\",\n                      \"content\": [\n                          { \n                              \"block\": \"text\", \n                              \"mods\": { \"size\": \"m\" } \n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "8f5057d7-42d8-4933-b5f8-fa0beba6e451",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block, button empty size",
                  "fullTitle": "WARNING.INVALID_BUTTON_SIZE VALID Not warning block, button empty size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": [\n                  {\n                      \"block\": \"button\", \n                      \"mods\": { \"size\": \"\" }\n                  },\n                  { \n                      \"block\": \"text\", \n                      \"mods\": { \"size\": \"m\" } \n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "54938658-9128-472c-874b-abd8dae8643f",
                  "parentUUID": "caea23c5-0739-4e8c-9bc3-61aa8ecae080",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e32f9373-0001-435a-87ca-1e00f041bda0",
                "7301e955-35f8-443f-9af1-b1fe86112127",
                "c0343260-9e62-4d3f-a5f2-eddf1ab47ae9",
                "11fff80b-f617-4e5c-b12d-25354746b947",
                "518a4446-9272-4292-8df8-8a8d7e835f26",
                "5c4db229-03cb-440b-9d49-57536e1d2fe1",
                "34a9fc23-d9c8-447e-8d54-461a43f039dd",
                "8d9a6c68-d5f1-49ce-ac73-7ae49699e16d",
                "0e48d73e-a69e-4fef-9ed6-65452ec72cc6",
                "8f5057d7-42d8-4933-b5f8-fa0beba6e451",
                "54938658-9128-472c-874b-abd8dae8643f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8c10229-5c6c-4b76-81b5-e8ceb7d419b8",
          "title": "WARNING.INVALID_PLACEHOLDER_SIZE",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
          "file": "\\test\\test-warning-placeholder-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f751f475-ed20-45ae-9fac-298ccbaa597d",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Invalid size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "91018d8a-8410-4dbc-b45f-195a65834ad4",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in 2 sequential placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in 2 sequential placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xl\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"xxl\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 4 },\n                      \"end\": { \"column\": 22, \"line\": 7 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 21, \"line\": 8 },\n                      \"end\": { \"column\": 22, \"line\": 11 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "ff92184e-35d9-4a6d-be12-39d0289e7eb5",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxl\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"xxxl\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"xxxxl\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 7 },\n                      \"end\": { \"column\": 30, \"line\": 10 }\n                  }\n              },\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 29, \"line\": 11 },\n                      \"end\": { \"column\": 30, \"line\": 18 }\n                  }\n              }\n              ,\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 45, \"line\": 14 },\n                      \"end\": { \"column\": 34, \"line\": 17 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "e723904d-5f1e-464a-bd79-39fc2649db73",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Invalid empty size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID Invalid empty size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "0fa6055b-8557-4235-bff5-7dea05f5aca1",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No mods in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No mods in placeholder",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 5 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "dc34395d-1624-4a5a-85a3-f31ff088c9f5",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "No size property in placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE INVALID No size property in placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"prop\": \"m\", \"prop2\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.INVALID_PLACEHOLDER_SIZE\",\n                  \"error\": \"Некорретный размер блока placeholder в блоке warning, допустимые значения: s, m, l\",\n                  \"location\": {\n                      \"start\": { \"column\": 28, \"line\": 3 },\n                      \"end\": { \"column\": 18, \"line\": 6 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "62f8cc34-79c8-49aa-8186-39392b9b3b0e",
                  "parentUUID": "f751f475-ed20-45ae-9fac-298ccbaa597d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "91018d8a-8410-4dbc-b45f-195a65834ad4",
                "ff92184e-35d9-4a6d-be12-39d0289e7eb5",
                "e723904d-5f1e-464a-bd79-39fc2649db73",
                "0fa6055b-8557-4235-bff5-7dea05f5aca1",
                "dc34395d-1624-4a5a-85a3-f31ff088c9f5",
                "62f8cc34-79c8-49aa-8186-39392b9b3b0e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-placeholder-size.js",
              "file": "\\test\\test-warning-placeholder-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Valid l-size in placeholder, content is object, not an array",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder, content is object, not an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "ce500c4b-fc48-4826-ab66-216ae83acba3",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid l-size in placeholder",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid l-size in placeholder",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  {\n                      \"block\": \"placeholder\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "aca91555-45d2-4a48-bafe-1b0365488534",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Valid sizes in nested placeholders",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Valid sizes in nested placeholders",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"warning\",\n              \"content\": [\n                  {\n                      \"elem\": \"content\",\n                      \"content\": [\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"s\" }\n                          },\n                          {\n                              \"block\": \"placeholder\",\n                              \"mods\": { \"size\": \"m\" },\n                              \"content\" : {\n                                  \"block\": \"placeholder\",\n                                  \"mods\": { \"size\": \"l\" }\n                              }\n                          }\n                      ]\n                  }\n              ]\n          }`;\n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f2c0cd83-feed-49ed-9cc7-42e4912fcb43",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with non-valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with non-valid placeholder size",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"xs\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "75c45bd1-543f-4ff0-b0d6-934318f95938",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with empty placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with empty placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "14074fc7-2e3b-4fbc-9d44-b309da984d6a",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Not warning block with no placeholder mods",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID Not warning block with no placeholder mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\"\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "4ea890a9-7834-4331-b01b-4259220f62b8",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with valid placeholder size",
                  "fullTitle": "WARNING.INVALID_PLACEHOLDER_SIZE VALID no warning block with valid placeholder size",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n              \"block\": \"not-a-warning-block\",\n              \"content\": {\n                  \"block\": \"placeholder\",\n                  \"mods\": { \"size\": \"s\" }\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "9bf55539-ff5f-4e7f-bed2-61881e185275",
                  "parentUUID": "cc8f8f32-c751-4f79-a9fd-727d5b0543f3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ce500c4b-fc48-4826-ab66-216ae83acba3",
                "aca91555-45d2-4a48-bafe-1b0365488534",
                "f2c0cd83-feed-49ed-9cc7-42e4912fcb43",
                "75c45bd1-543f-4ff0-b0d6-934318f95938",
                "14074fc7-2e3b-4fbc-9d44-b309da984d6a",
                "4ea890a9-7834-4331-b01b-4259220f62b8",
                "9bf55539-ff5f-4e7f-bed2-61881e185275"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d11170b3-1dc0-4ae2-b82a-cff2a31ee7ad",
          "title": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
          "file": "\\test\\test-warning-text-size.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
              "title": "INVALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 2 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n\"block\": \"warning\",\n\"content\": [\n    {\n        \"block\": \"placeholder\",\n        \"mods\": { \"size\": \"m\" }\n    },\n    {\n        \"elem\": \"content\",\n        \"content\": [\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"m\" }\n            },\n            {\n                \"block\": \"text\",\n                \"mods\": { \"size\": \"l\" }\n            }\n        ]\n    }\n]\n            }`;\n            const result = lint(inputJson);\n            expect(result).to.be.an('array').that.is.deep.equal([\n{\n    \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n    \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n    \"location\": {\n        \"start\": { \"column\": 1, \"line\": 1 },\n        \"end\": { \"column\": 14, \"line\": 22 }\n    }\n}\n            ]);",
                  "err": {},
                  "uuid": "56c2c8af-7855-447a-b6d0-f65bf1f7d136",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 blocks of different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID 3 blocks of different sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"placeholder\",\n            \"mods\": { \"size\": \"m\" }\n        },\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 26 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "9ba9cfa8-90cf-4ec4-93e4-81d2c4012769",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nested warning blocks, empty lines",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID nested warning blocks, empty lines",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n{\n    \"block\": \"warning\",\n    \"content\": {\n        \"block\": \"warning\",\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"s\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 28, \"line\": 4 },\n            \"end\": { \"column\": 18, \"line\": 22 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "ee19e3e9-4514-42de-99df-59f67b19bd48",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested text blocks with different sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested text blocks with different sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": \n    {\n        \"block\": \"text\",\n        \"mods\": { \"size\": \"s\" },\n        \"content\": \n        {\n            \"elem\": \"content\",\n            \"content\": \n            [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                }\n            ]\n        }\n    }\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 23 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "aea877f3-505d-48aa-880e-9eee88200cea",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text blocks with different sizes on different levels",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text blocks with different sizes on different levels",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"s\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "599961df-0888-456e-9d26-b81d9e80739a",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\"                        \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "6651ab79-9bad-441c-b418-19ec339832c3",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without mods",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\"\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 20 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "bfd1a8a6-60af-4fac-bea5-2bb2fce94507",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Text block without size in mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"size\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"prop\": \"m\" }    \n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "aae3ad0d-3071-403a-af8f-a8a64e48e031",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon text block without size in mods",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon text block without size in mods",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"block\": \"card\",\n            \"content\": \n            {\n                \"elem\": \"content\",\n                \"content\": \n                    {\n                        \"block\": \"text\",\n                        \"mods\": { \"prop\": \"m\" }\n                    }\n            }\n        },\n        {\n            \"block\": \"text\",\n            \"mods\": { \"size\": \"m\" }\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 21 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "3f0822db-fff0-4fcb-a87f-3a7631b1d943",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID size is not set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"m\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "9ebb8507-3874-4fb7-af2f-d1602920d17c",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Etalon size is not set",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Etalon size is not set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{\n    \"block\": \"warning\",\n    \"content\": [\n        {\n            \"elem\": \"content\",\n            \"content\": [\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"\" }\n                },\n                {\n                    \"block\": \"text\",\n                    \"mods\": { \"size\": \"xl\" }\n                }\n            ]\n        }\n    ]\n}`;\nconst result = lint(inputJson);\nexpect(result).to.be.an('array').that.is.deep.equal([\n    {\n        \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n        \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n        \"location\": {\n            \"start\": { \"column\": 1, \"line\": 1 },\n            \"end\": { \"column\": 14, \"line\": 18 }\n        }\n    }\n]);",
                  "err": {},
                  "uuid": "05009227-6546-4d5a-b96d-a908aea927fc",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Nested warning elements of different text sizes inside one warning block",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL INVALID Nested warning elements of different text sizes inside one warning block",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": [\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                      ]\n                  },\n                  { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.deep.equal([\n              {\n                  \"code\": \"WARNING.TEXT_SIZES_SHOULD_BE_EQUAL\",\n                  \"error\": \"Тексты в блоке warning должны быть одного размера и должны быть заданы\",\n                  \"location\": {\n                      \"start\": { \"column\": 1, \"line\": 1 },\n                      \"end\": { \"column\": 14, \"line\": 21 }\n                  }\n              }\n          ]);",
                  "err": {},
                  "uuid": "cc2044fa-c246-484f-b0ed-a53a1d15ef59",
                  "parentUUID": "ccbea8b7-6a4b-4d2e-928b-8822ea53b2e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "56c2c8af-7855-447a-b6d0-f65bf1f7d136",
                "9ba9cfa8-90cf-4ec4-93e4-81d2c4012769",
                "ee19e3e9-4514-42de-99df-59f67b19bd48",
                "aea877f3-505d-48aa-880e-9eee88200cea",
                "599961df-0888-456e-9d26-b81d9e80739a",
                "6651ab79-9bad-441c-b418-19ec339832c3",
                "bfd1a8a6-60af-4fac-bea5-2bb2fce94507",
                "aae3ad0d-3071-403a-af8f-a8a64e48e031",
                "3f0822db-fff0-4fcb-a87f-3a7631b1d943",
                "9ebb8507-3874-4fb7-af2f-d1602920d17c",
                "05009227-6546-4d5a-b96d-a908aea927fc",
                "cc2044fa-c246-484f-b0ed-a53a1d15ef59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
              "title": "VALID",
              "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test-warning-text-size.js",
              "file": "\\test\\test-warning-text-size.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "2 text blocks of size-l",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 2 text blocks of size-l",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  [\n                      { \n                          \"block\": \"placeholder\",\n                          \"mods\": { \"size\": \"m\" }\n                      },\n                      {  \n                          \"elem\": \"content\",\n                          \"content\": \n                              [\n                                  { \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  },\n                                  {  \n                                      \"block\": \"text\",\n                                      \"mods\": { \"size\": \"l\" }\n                                  }\n                              ]\n                      }\n                  ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "08f4ed58-24d6-4970-a1ca-e5e99d124dce",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 text blocks of size-m, 3rd level children,content is object",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 text blocks of size-m, 3rd level children,content is object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": \n                  { \n                      \"block\": \"warning\", \n                      \"elem\": \"content\",\n                      \"content\": \n                          {\n                              \"block\": \"warning\",\n                              \"elem\": \"button-wrapper\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"m\" }\n                                      }\n                                  ]\n                          }\n                  }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "79846258-f0f5-4773-9ad8-137748ff1f22",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "3 nested warning blocks of different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID 3 nested warning blocks of different text sizes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"warning\",\n              \"content\": [\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {\n                              \"block\": \"warning\",\n                              \"content\":\n                                  [\n                                      { \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      },\n                                      {  \n                                          \"block\": \"text\",\n                                          \"mods\": { \"size\": \"l\" }\n                                      }\n                                  ]\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          }\n                      ]\n                  },\n                  { \n                      \"block\": \"text\",\n                      \"mods\": { \"size\": \"l\" }\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "d70a1743-e791-4208-8f2e-c601023cedd7",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with non-equal text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with non-equal text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"m\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"l\" }\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "075cf9d6-fc56-4d80-992d-d6aba94744e6",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no warning block with not set text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID no warning block with not set text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `\n          { \n              \"block\": \"not-a-warning-block\",\n              \"content\": {  \n                  \"elem\": \"content\",\n                  \"content\": \n                      [\n                          { \n                              \"block\": \"text\",\n                              \"mods\": { \"size\": \"\" }\n                          },\n                          {  \n                              \"block\": \"text\",\n                              \"mods\": { \"prop\": \"l\" }\n                          },\n                          {  \n                              \"block\": \"text\"\n                          }\n                      ]\n              }\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "f36b0e46-9517-4d32-b36c-71d9f4bff8b6",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Separate nested warning blocks with different text sizes",
                  "fullTitle": "WARNING.TEXT_SIZES_SHOULD_BE_EQUAL VALID Separate nested warning blocks with different text sizes",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const inputJson = `{ \n              \"block\": \"warning\",\n              \"content\": [\n                  {\"block\": \"text\", \"mods\": { \"size\": \"s\" } },\n                  { \n                      \"block\": \"warning\", \n                      \"content\": [\n                          {\n                              \"block\": \"warning\",\n                              \"content\": [\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } },\n                                  { \"block\": \"text\", \"mods\": { \"size\": \"m\" } }\n                              ]\n                          },\n                          { \"block\": \"text\", \"mods\": { \"size\": \"l\" } }\n                      ]\n                  }\n              ]\n          }`;\n          \n          const result = lint(inputJson);\n          expect(result).to.be.an('array').that.is.empty;",
                  "err": {},
                  "uuid": "77d9af0b-3e59-4c5b-ae97-80095187059f",
                  "parentUUID": "269a0a9f-2567-41a7-9b46-f69f97bd59fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "08f4ed58-24d6-4970-a1ca-e5e99d124dce",
                "79846258-f0f5-4773-9ad8-137748ff1f22",
                "d70a1743-e791-4208-8f2e-c601023cedd7",
                "075cf9d6-fc56-4d80-992d-d6aba94744e6",
                "f36b0e46-9517-4d32-b36c-71d9f4bff8b6",
                "77d9af0b-3e59-4c5b-ae97-80095187059f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "901d194b-518f-476b-9475-112b3e8ffb9f",
          "title": "Simple input",
          "fullFile": "C:\\Users\\kar\\Documents\\Web\\shri\\2020\\moscow\\february\\task2\\stub\\test\\test.js",
          "file": "\\test\\test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "empty input",
              "fullTitle": "Simple input empty input",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "829ab265-9c17-4368-b4d3-434f21f729e9",
              "parentUUID": "901d194b-518f-476b-9475-112b3e8ffb9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty object",
              "fullTitle": "Simple input empty object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "d980f7b5-044a-4d38-a669-381917192cba",
              "parentUUID": "901d194b-518f-476b-9475-112b3e8ffb9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "empty warning",
              "fullTitle": "Simple input empty warning",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const result = lint('{ \"block\": \"warning\"}');\nexpect(result).to.be.an('array').that.is.empty;",
              "err": {},
              "uuid": "bab45e19-d179-4e3a-9494-b5a5b105f5b6",
              "parentUUID": "901d194b-518f-476b-9475-112b3e8ffb9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "829ab265-9c17-4368-b4d3-434f21f729e9",
            "d980f7b5-044a-4d38-a669-381917192cba",
            "bab45e19-d179-4e3a-9494-b5a5b105f5b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}